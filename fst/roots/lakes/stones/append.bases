

#include <stdlib.h>




#ifndef added_fst_roots_lakes_stones_append

#define added_fst_roots_lakes_stones_append




void * append_fst_roots_lakes_stones

(

void * that_stones_targets,

void * that_stones_append

)

{

























if (  ( void * ) that_stones_targets  ==  ( void * ) NULL  )

{

return  ( void * ) NULL;

}









if (  ( void * ) that_stones_append  ==  ( void * ) NULL  )

{

return  ( void * ) NULL;

}

























void * note_silts_counts_targets  =  ( void * ) NULL;









while (  ( void * ) note_silts_counts_targets  ==  ( void * ) NULL  )

{

/* ( void * ) */  note_silts_counts_targets   =   ( void * ) malloc (   ( int ) 1   *   ( int ) ( unsigned int ) sizeof ( int )   );

}









/* ( int ) */  * ( int * ) ( void * )  note_silts_counts_targets   =   ( int ) 0;
















void * note_silts_counts_append  =  ( void * ) NULL;









while (  ( void * ) note_silts_counts_append  ==  ( void * ) NULL  )

{

/* ( void * ) */  note_silts_counts_append   =   ( void * ) malloc (   ( int ) 1   *   ( int ) ( unsigned int ) sizeof ( int )   );

}









/* ( int ) */  * ( int * ) ( void * )  note_silts_counts_append   =   ( int ) 0;

























/* ( int ) */  * ( int * ) ( void * )  note_silts_counts_targets   =   ( int ) 0;









while

(




( char ) * ( char * )


(


( char * ) ( void * ) that_stones_targets


+


( int ) * ( int * ) ( void * ) note_silts_counts_targets


)




!=




( char ) '\0'




)

{




/* ( int ) */  * ( int * ) ( void * ) note_silts_counts_targets


=


( int ) * ( int * ) ( void * ) note_silts_counts_targets


+


( int ) 1;




}

























* ( int * ) note_silts_counts_append = 0;









while (  * (  ( char * ) that_stones_append  +  * ( int * ) note_silts_counts_append  )  !=  '\0'  )

{

























* (  ( char * ) that_stones_targets  +  * ( int * ) note_silts_counts_targets  +  * ( int * ) note_silts_counts_append  )

=

* (  ( char * ) that_stones_append  +  * ( int * ) note_silts_counts_append  );

























* ( int * ) note_silts_counts_append  =  * ( int * ) note_silts_counts_append  +  1;









}









* (  ( char * ) that_stones_targets  +  * ( int * ) note_silts_counts_targets  +  * ( int * ) note_silts_counts_append  )  =  '\0';

























* ( int * ) note_silts_counts_targets = 0;









if ( note_silts_counts_targets != NULL )

{

free ( note_silts_counts_targets );

}









note_silts_counts_targets = NULL;
















* ( int * ) note_silts_counts_append = 0;









if ( note_silts_counts_append != NULL )

{

free ( note_silts_counts_append );

}









note_silts_counts_append = NULL;

























return  NULL;









}




#endif

