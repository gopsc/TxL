


#include  <stdlib.h>

#include  <stdio.h>




void *  read_fst_roots_trees_files

(  

void *  that_words_names,

void ** that_words_results

)



{





* ( char * ) * that_words_results  =  '\0';

* that_words_results  =  realloc (  * that_words_results,  1 * sizeof ( char )  );


void  *   note_files_got;

note_files_got   =   fopen  (  that_words_names,  "rb"  );

if

( note_files_got  == NULL )

{

return NULL;

}



void  *   note_words_read;

note_words_read  =  malloc  (  2  *  sizeof ( __uint8_t )  );



void *  note_numbers_counts;

note_numbers_counts  =  malloc  (  1  *  sizeof ( __uint64_t )  );








while  (    fgets  (   note_words_read,   2,   ( FILE * ) note_files_got   )   !=   NULL    )

{




* ( __uint64_t * ) note_numbers_counts   =   0;

while

(

* ( char * ) (  * that_words_results  +  * ( __uint64_t * ) note_numbers_counts  )   !=   '\0'

)

{

* ( __uint64_t * ) note_numbers_counts   =   * ( __uint64_t * ) note_numbers_counts   +   1;

}




* that_words_results  =  realloc (  * that_words_results,   ( 1  +  1  +  * ( __uint64_t * ) note_numbers_counts )  *  sizeof ( char )  );


*  ( char * )  (   * that_words_results   +   * ( int * ) note_numbers_counts   )   =   * ( char * ) note_words_read;

*  ( char * )  (   * that_words_results   +   * ( int * ) note_numbers_counts   +   1   )   =   '\0';




}







fclose  (  note_files_got  );

free  (  note_words_read  );

free  (  note_numbers_counts  );


return 0;

}
