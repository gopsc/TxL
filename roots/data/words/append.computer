


#include <stdlib.h>


void  *   fstRootsDataWordsAppend


(

void  *   that_words_targets,

void  *   that_words_append

)

{


void  *   note_numbers_counts_targets;

note_numbers_counts_targets   =   malloc  (  1  *  sizeof ( __uint64_t )  );



* ( __uint64_t * ) note_numbers_counts_targets   =   0;


while  (  * ( char * ) (  that_words_targets  +  * ( __uint64_t * ) note_numbers_counts_targets  )   !=   '\0'  )

{

* ( __uint64_t * ) note_numbers_counts_targets   =   * ( __uint64_t * ) note_numbers_counts_targets   +   1;

}





void  *   note_numbers_counts_append;

note_numbers_counts_append   =   malloc  (  1  *  sizeof ( __uint64_t )  );



* ( __uint64_t * ) note_numbers_counts_append   =   0;

while  (   * ( char * ) (  that_words_append  +  * ( __uint64_t * ) note_numbers_counts_append  )   !=   '\0'   )

{

* ( char * ) (  that_words_targets  +  * ( __uint64_t * ) note_numbers_counts_targets  +  * ( __uint64_t * ) note_numbers_counts_append  )
=
* ( char * ) (  that_words_append  +  * ( __uint64_t * ) note_numbers_counts_append  );



* ( __uint64_t * ) note_numbers_counts_append   =   * ( __uint64_t * ) note_numbers_counts_append   +   1;

}



* ( char * ) (  that_words_targets  +  * ( __uint64_t * ) note_numbers_counts_targets  +  * ( __uint64_t * ) note_numbers_counts_append  )   =   '\0';




free ( note_numbers_counts_targets );

free ( note_numbers_counts_append );

return  NULL;

}











