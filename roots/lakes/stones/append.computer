/*

#include <stdlib.h>

*/


void  *   append_fst_roots_lakes_stones


(

void  *   that_stones_targets,

void  *   that_stones_append

)

{





void  *   note_silts_counts_targets = NULL;

note_silts_counts_targets   =   malloc  (  1  *  sizeof ( __uint64_t )  );



void  *   note_silts_counts_append = NULL;

note_silts_counts_append   =   malloc  (  1  *  sizeof ( __uint64_t )  );





* ( __uint64_t * ) note_silts_counts_targets   =   0;


while

(

* ( ( char * )  that_stones_targets  +  * ( __uint64_t * ) note_silts_counts_targets  )  !=  '\0'

)

{

* ( __uint64_t * ) note_silts_counts_targets   =   * ( __uint64_t * ) note_silts_counts_targets   +   1;

}





* ( __uint64_t * ) note_silts_counts_append   =   0;

while

(

* ( ( char * ) that_stones_append  +  * ( __uint64_t * ) note_silts_counts_append  )   !=   '\0'   )

{


* ( ( char * ) that_stones_targets  +  * ( __uint64_t * ) note_silts_counts_targets  +  * ( __uint64_t * ) note_silts_counts_append  )
=
* ( ( char * ) that_stones_append  +  * ( __uint64_t * ) note_silts_counts_append  );


* ( __uint64_t * ) note_silts_counts_append   =   * ( __uint64_t * ) note_silts_counts_append   +   1;

}



* ( ( char * ) that_stones_targets  +  * ( __uint64_t * ) note_silts_counts_targets  +  * ( __uint64_t * ) note_silts_counts_append  )   =   '\0';






free ( note_silts_counts_targets );

free ( note_silts_counts_append );


return  NULL;

}