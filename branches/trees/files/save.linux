





void  *   save_fst_branches_trees_files

(

void * that_stones_names_files,
   
void * that_stones_names_contents,

void ** that_places_results

)
                     
{



void * note_numbers_sizes = that_fst_roots_lakes;

create_fst_roots_lakes ( & note_numbers_sizes );






void * note_places_names_files = that_fst_roots_lakes;

fish_fst_branches_lakes ( that_stones_names_files, & note_places_names_files );






void * note_places_names_contents = that_fst_roots_lakes;

fish_fst_branches_lakes ( that_stones_names_contents, & note_places_names_contents );





void * note_numbers_counts = that_fst_roots_lakes;

create_fst_roots_lakes ( & note_numbers_counts );

* ( __uint64_t * ) note_numbers_counts  =  1;




void * note_numbers_counts_two = that_fst_roots_lakes;

create_fst_roots_lakes ( & note_numbers_counts_two );   




measure_fst_roots_lakes_stones ( note_places_names_files, & note_numbers_sizes );

* ( __uint64_t * ) note_numbers_sizes = 1  *  ( 1 + * ( __uint64_t * ) note_numbers_sizes );

void * note_stones_names = that_fst_roots_lakes;

create_fst_roots_lakes ( & note_stones_names );

resize_fst_roots_lakes ( & note_stones_names, note_numbers_sizes );




void * note_places_names = that_fst_roots_lakes;




void * note_numbers_results = that_fst_roots_lakes;
   
create_fst_roots_lakes ( & note_numbers_results );





free_fst_roots_lakes ( & note_numbers_sizes );




/*

that_words_name       /.../.../...

note_numbers_count     1   2  ...

note_words_name        /...  /...

*/







while  (    * ( __uint64_t * ) note_numbers_counts  !=  0    )

{


copy_fst_roots_lakes_stones  ( note_stones_names,  note_places_names_files );
    
note_places_names = note_stones_names;





* ( __uint64_t * ) note_numbers_counts_two   =   0;

while

(

* ( __uint64_t * ) note_numbers_counts_two   <   * ( __uint64_t * ) note_numbers_counts

)

{

  

find_fst_roots_lakes_stones
   
(

note_places_names + 1,
   
( void * ) "/",
   
& note_places_names

);




if  (  note_places_names   ==   that_fst_roots_lakes  )

{

* ( __uint64_t * ) note_numbers_counts   =   0;

}




* ( __uint64_t * ) note_numbers_counts_two   =   * ( __uint64_t * ) note_numbers_counts_two   +   1;

}









if (  * ( __uint64_t * ) note_numbers_counts   !=   0  )

{


   
* ( __uint64_t * ) note_numbers_counts   =   * ( __uint64_t * ) note_numbers_counts   +   1;



* ( char * ) note_places_names = '\0';




   
is_fst_roots_trees_dirents ( note_stones_names, & note_numbers_results );



if  (  * ( __uint64_t * ) note_numbers_results   ==   0  )

{

create_fst_roots_trees_dirents ( note_stones_names, & note_numbers_results );


if  (  * ( __uint64_t * ) note_numbers_results   ==   0  )

{


fish_fst_branches_lakes

(

( void * ) "fst,branches,lakes,bubbles,no",

that_places_results

);


free_fst_roots_lakes ( & note_stones_names );

free_fst_roots_lakes ( & note_numbers_counts );

free_fst_roots_lakes ( & note_numbers_counts_two );

free_fst_roots_lakes ( & note_numbers_results );


return that_fst_branches_lakes;

}

}




}


}



free_fst_roots_lakes ( & note_stones_names );

free_fst_roots_lakes ( & note_numbers_counts );

free_fst_roots_lakes ( & note_numbers_counts_two );










is_fst_roots_trees_dirents

(

note_places_names_files,

& note_numbers_results

);



if  (  * ( __uint64_t * ) note_numbers_results   ==   1  )

{

fish_fst_branches_lakes

(

( void * ) "fst,branches,lakes,bubbles,no",

that_places_results

);

}



else if  (  * ( __uint64_t * ) note_numbers_results   ==   0  )

{


write_fst_roots_trees_files

(

note_places_names_files,

note_places_names_contents,

& note_numbers_results

);




if (  * ( __uint64_t * ) note_numbers_results   ==   0  )

{

fish_fst_branches_lakes

(

( void * ) "fst,branches,lakes,bubbles,no",

that_places_results

);

}


else if (  * ( __uint64_t * ) note_numbers_results   ==   1  )

{

fish_fst_branches_lakes

(

( void * ) "fst,branches,lakes,bubbles,yes",

that_places_results

);

}


}

   
   

free_fst_roots_lakes ( & note_numbers_results );

return  fish_fst_branches_lakes;

}

