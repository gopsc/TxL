set(CMAKE_INSTALL_PREFIX @CMAKE_INSTALL_PREFIX@)
set(LIB_INSTALL_DIR @LIB_INSTALL_DIR@)
set(ANDROID_ROOT @ANDROID_ROOT@)
set(ANDROID_BIN_DIR @ANDROID_BIN_DIR@)
set(ANDROID_JAR_DIR @ANDROID_JAR_DIR@)
set(ANDROID_FRAMEWORKS_BASE @ANDROID_FRAMEWORKS_BASE@)
set(GENERAL_SOURCE_PATH @GENERAL_SOURCE_PATH@)

find_package(Java 1.6 REQUIRED)
include(UseJava)

function(dex_preopt INPUT_JAR OUTPUT_ODEX)
    set(VERIFY "all")
    set(OPTIMIZE "verified")
    set(REGISTER_MAPS true)
    set(UNIPROCESSOR true)
    set(ALLOK true)

    set(OPTIMIZE_OPTIONS "")

    # Sanity-check and expand the verify option.
    if (VERIFY MATCHES "none" )
        set(OPTIMIZE_OPTIONS "v=n")
    elseif (VERIFY MATCHES "remote" )
        set(OPTIMIZE_OPTIONS "v=r")
    elseif (VERIFY MATCHES "all")
        set(OPTIMIZE_OPTIONS "v=a")
    else ()
        message(ERROR "bad value for dex preoptimizer option verify: ${VERIFY}")
        set(ALLOK false)
    endif ()

    # Sanity-check and expand the optimize option.
    if (OPTIMIZE MATCHES "none")
        set(OPTIMIZE_OPTIONS "${OPTIMIZE_OPTIONS},o=n")
    elseif (OPTIMIZE MATCHES "verified")
        set(OPTIMIZE_OPTIONS "${OPTIMIZE_OPTIONS},o=v")
    elseif (OPTIMIZE MATCHES  "xall")
        set(OPTIMIZE_OPTIONS "${OPTIMIZE_OPTIONS},o=a")
    else ()
        message(ERROR "bad value for dex preoptimizer option optimize: ${OPTIMIZE}")
        set(ALLOK false)
    endif ()

    # Expand the register maps selection, if necessary.
    if (REGISTER_MAPS)
        set(OPTIMIZE_OPTIONS "${OPTIMIZE_OPTIONS},m=y")
    endif ()

    # Expand the uniprocessor directive, if necessary.
    if (UNIPROCESSOR)
        set(OPTIMIZE_OPTIONS "${OPTIMIZE_OPTIONS},u=y")
    else ()
        set(OPTIMIZE_OPTIONS "${OPTIMIZE_OPTIONS},u=n")
    endif ()

    if (ALLOK)
        execute_process(RESULT_VARIABLE dexoptresult COMMAND gdbserver localhost:1234 ${ANDROID_BIN_DIR}/dexopt --preopt ${INPUT_JAR} ${OUTPUT_ODEX} ${OPTIMIZE_OPTIONS})
        if(dexoptresult)
            message(STATUS "Preoptimization failed!")
            message(FATAL_ERROR "${ANDROID_BIN_DIR}/dexopt --preopt ${INPUT_JAR} ${OUTPUT_ODEX} ${OPTIMIZE_OPTIONS} reports: ${dexoptresult}")
        endif()
    else()
        message(WARNING "Could not preoptimize!")
    endif ()
endfunction()

# installed file and work dir should really be inferable from target name, but let's get it working first
function(process_installed_android_jar _TARGET_NAME _INSTALLED_FILE _WORK_DIR)
    set(LOCAL_WORK_DIR ${_WORK_DIR}/${_TARGET_NAME}-intermediates)

    message(STATUS "** Post-processing the jar for target ${_TARGET_NAME} **")

    message(STATUS "Creating local work dir ${LOCAL_WORK_DIR}")
    # make an intermediary work directory inside the given work dir _WORK_DIR/intermediates
    file(MAKE_DIRECTORY ${LOCAL_WORK_DIR})

    message(STATUS "Moving jar file ${_INSTALLED_FILE} into the working directory")
    # move installed file to intermediates/classes.jar
    file(COPY ${_INSTALLED_FILE} DESTINATION ${LOCAL_WORK_DIR})
    if(${ARGC} GREATER 3)
        file(RENAME ${LOCAL_WORK_DIR}/${ARGV3}.jar ${LOCAL_WORK_DIR}/classes.jar)
    else()
        file(RENAME ${LOCAL_WORK_DIR}/${_TARGET_NAME}.jar ${LOCAL_WORK_DIR}/classes.jar)
    endif()

    # dex classes.jar
    message(STATUS "Dexing classes.jar for target ${_TARGET_NAME} (this will take a while)")
    execute_process(RESULT_VARIABLE dxresult COMMAND dx -JXms16M -JXmx2048M --dex --output=${LOCAL_WORK_DIR}/classes.dex --core-library ${LOCAL_WORK_DIR}/classes.jar)

    # create new _TARGET_NAME.jar from classes.jar and classes.dex
    message(STATUS "Creating new jar for target ${_TARGET_NAME}")
    message(STATUS "Create a new jar just with a dummy file")
    file(WRITE ${LOCAL_WORK_DIR}/dummy "")
    execute_process(RESULT_VARIABLE jarresult COMMAND ${Java_JAR_EXECUTABLE} cf ${LOCAL_WORK_DIR}/javalib.jar -C ${LOCAL_WORK_DIR} dummy)
    if(jarresult)
        message(SEND_ERROR "Could not create new jar!")
        message(FATAL_ERROR "${Java_JAR_EXECUTABLE} cf ${LOCAL_WORK_DIR}/javalib.jar ${LOCAL_WORK_DIR}/dummy reports: ${jarresult}")
    else()
        message(STATUS "Remove the dummy file from the jar and disk")
        execute_process(COMMAND zip -qd ${LOCAL_WORK_DIR}/javalib.jar dummy)
        file(REMOVE ${LOCAL_WORK_DIR}/dummy)
        # add the dex to the jar
        message(STATUS "Adding classes.dex to the new jar")
        execute_process(COMMAND zip -qj ${LOCAL_WORK_DIR}/javalib.jar ${LOCAL_WORK_DIR}/classes.dex)

        if(_TARGET_NAME MATCHES "framework")
            message(STATUS "Adding preloaded-classes to the new jar for target framework only")
            execute_process(COMMAND zip -qj ${LOCAL_WORK_DIR}/javalib.jar ${ANDROID_FRAMEWORKS_BASE}/preloaded-classes)
        endif()
        if(_TARGET_NAME MATCHES "shashlik")
            message(STATUS "Adding Manifest to the new jar for target shashlik only")
            execute_process(COMMAND zip -qj ${LOCAL_WORK_DIR}/javalib.jar ${CMAKE_SOURCE_DIR}/../src/deps/javalibrary-shashlik/AndroidManifest.xml)
        endif()
#         if [ -d out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes ] ; then
#             java_res_jar_flags=$(find out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes -type f -a -not -name "*.class" | sed -e "s?^out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes/? -C out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes ?");
#             if [ -n "$java_res_jar_flags" ] ; then
#                 echo $java_res_jar_flags >out/target/common/obj/JAVA_LIBRARIES/core_intermediates/java_res_jar_flags; jar uf out/target/common/obj/JAVA_LIBRARIES/core_intermediates/javalib.jar $java_res_jar_flags;
#             fi;
#         fi
#         # update the jar with special local things (jar-arg-list in ABS, generated from PRIVATE_EXTRA_JAR_ARGS)
#         jar uf out/target/common/obj/JAVA_LIBRARIES/core_intermediates/javalib.jar @out/target/common/obj/JAVA_LIBRARIES/core_intermediates/jar-arg-list

        message(STATUS "Cleaning up unneeded or stale files")
        file(REMOVE ${ANDROID_JAR_DIR}/classes.dex)
        file(REMOVE ${ANDROID_JAR_DIR}/classes.jar)
        file(REMOVE ${ANDROID_JAR_DIR}/${_TARGET_NAME}.jar)
        file(REMOVE ${ANDROID_JAR_DIR}/${_TARGET_NAME}.odex)

        # preoptimize the new jar
        # remove old odex, because dex-preopt requires there to not be one already
        message(STATUS "Preoptimizing the jar for target ${_TARGET_NAME}")
        file(RENAME ${LOCAL_WORK_DIR}/javalib.jar ${LOCAL_WORK_DIR}/${_TARGET_NAME}.jar)
        execute_process(COMMAND rm -f ${LOCAL_WORK_DIR}/${_TARGET_NAME}.odex)
        # run dex-preopt (not installed)

#         dalvik/tools/dex-preopt
#             --dexopt=host/linux-x86/bin/dexopt
#             --build-dir=out
#             --product-dir=target/product/generic/dex_bootjars
#             --boot-dir=/system/framework
#             --boot-jars=core:conscrypt:okhttp:core-junit:bouncycastle:ext:framework:framework2:telephony-common:voip-common:mms-common:android.policy:services:apache-xml:webviewchromium
#             --uniprocessor
#             ${LOCAL_WORK_DIR}/core.jar
#             ${LOCAL_WORK_DIR}/core.odex
#         dex_preopt(${LOCAL_WORK_DIR}/./${_TARGET_NAME}.jar ${LOCAL_WORK_DIR}/${_TARGET_NAME}.odex)

        # install the newly created odex and jar
        message(STATUS "Installing new files for target ${_TARGET_NAME}")
        set(PROPERTY ADDITIONAL_MAKE_CLEAN_FILES ${LOCAL_WORK_DIR}/${_TARGET_NAME}.odex DESTINATION ${ANDROID_JAR_DIR})
        file(INSTALL ${LOCAL_WORK_DIR}/${_TARGET_NAME}.jar DESTINATION ${ANDROID_JAR_DIR})
#         file(INSTALL ${LOCAL_WORK_DIR}/${_TARGET_NAME}.odex DESTINATION ${ANDROID_JAR_DIR})
    endif()
endfunction()

function(process_jar_to_apk _TARGET_NAME _ORIGIN _DESTINATION _REPO_PATH _RESOURCE_PACKAGE _WORK_DIR)
    set(LOCAL_WORK_DIR ${_WORK_DIR}/${_TARGET_NAME}-intermediates)

    message(STATUS " *** Processing ${_TARGET_NAME} for apk creation and installation")

    message(STATUS "Creating local work dir ${LOCAL_WORK_DIR}")
    # make an intermediary work directory inside the given work dir _WORK_DIR/intermediates
    file(MAKE_DIRECTORY ${LOCAL_WORK_DIR})

    message(STATUS "Moving jar file ${_ORIGIN} into the working directory")
    # move installed file to intermediates/classes.jar
    file(COPY ${_ORIGIN}/${_TARGET_NAME}.jar DESTINATION ${LOCAL_WORK_DIR})
    file(RENAME ${LOCAL_WORK_DIR}/${_TARGET_NAME}.jar ${LOCAL_WORK_DIR}/classes.jar)

    # dex classes.jar
    message(STATUS "Dexing classes.jar for target ${_TARGET_NAME} (this will take a while)")
    execute_process(RESULT_VARIABLE dxresult COMMAND dx -JXms16M -JXmx2048M --dex --output=${LOCAL_WORK_DIR}/classes.dex ${LOCAL_WORK_DIR}/classes.jar)

#     # build apk base
#     message(STATUS "Building the apk base")
#     execute_process(COMMAND touch ${LOCAL_WORK_DIR}/dummy)
#     execute_process(COMMAND cd ${LOCAL_WORK_DIR} && zip -qd ${LOCAL_WORK_DIR}/${_TARGET_NAME}.apk dummy)
#     execute_process(COMMAND rm ${LOCAL_WORK_DIR}/dummy)
# 
#     # build resources
#     message(STATUS "Building resources (this step may take a while)")
#     execute_process(COMMAND ${CMAKE_BINARY_DIR}/src/deps/aapt/aapt package -u -z -c en_US,normal,ldpi,mdpi,hdpi,xhdpi,xxhdpi,nodpi --preferred-configurations hdpi -M ${_REPO_PATH}/AndroidManifest.xml -S ${_REPO_PATH}/res  -I ${CMAKE_BINARY_DIR}/src/deps/javalibrary-frameworks/frameworks-res.apk --min-sdk-version 19 --target-sdk-version 19 --product tablet,nosdcard --version-code 19 --version-name 4.2.1-68   -F ${LOCAL_WORK_DIR}/package.apk)

    # add the dex to the package
    message(STATUS "Adding our dexed application to the apk")
    execute_process(COMMAND cp ${_RESOURCE_PACKAGE} ${LOCAL_WORK_DIR}/package.apk)
    execute_process(COMMAND ${CMAKE_BINARY_DIR}/src/deps/aapt/aapt add -k ${LOCAL_WORK_DIR}/package.apk ${LOCAL_WORK_DIR}/classes.dex)

    # sign and align the apk
    message(STATUS "Signing and aligning the apk file")
    execute_process(COMMAND mv ${LOCAL_WORK_DIR}/package.apk ${LOCAL_WORK_DIR}/package.apk.unsigned)
    execute_process(COMMAND java -cp ${CMAKE_BINARY_DIR}/src/deps/javalibrary-core/core.jar:${CMAKE_BINARY_DIR}/src/deps/javalibrary-conscrypt/conscrypt-prejarjar.jar:${CMAKE_BINARY_DIR}/src/deps/javalibrary-bouncycastle/bouncycastle-bcprov.jar:${CMAKE_BINARY_DIR}/src/deps/javalibrary-bouncycastle/bouncycastle-bcpkix.jar:${CMAKE_BINARY_DIR}/src/deps/signapk/signapk.jar com.android.signapk.SignApk ${CMAKE_SOURCE_DIR}/../platform.x509.pem ${CMAKE_SOURCE_DIR}/../platform.pk8  ${LOCAL_WORK_DIR}/package.apk.unsigned ${LOCAL_WORK_DIR}/package.apk.signed)
    execute_process(COMMAND mv ${LOCAL_WORK_DIR}/package.apk.signed ${LOCAL_WORK_DIR}/package.apk.unaligned)
    execute_process(COMMAND ${CMAKE_BINARY_DIR}/src/deps/zipalign/zipalign -f 4 ${LOCAL_WORK_DIR}/package.apk.unaligned ${LOCAL_WORK_DIR}/package.apk.aligned)
    execute_process(COMMAND mv ${LOCAL_WORK_DIR}/package.apk.aligned ${LOCAL_WORK_DIR}/${_TARGET_NAME}.apk)

    message(STATUS "Installing newly created apk for target ${_TARGET_NAME}")
    set(PROPERTY ADDITIONAL_MAKE_CLEAN_FILES ${LOCAL_WORK_DIR}/${_TARGET_NAME}.apk DESTINATION ${_DESTINATION})
    file(INSTALL ${LOCAL_WORK_DIR}/${_TARGET_NAME}.apk DESTINATION ${_DESTINATION})
endfunction()

set(ENV{LD_LIBRARY_PATH} ${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR}:${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR}/egl:${ANDROID_ROOT}/system/lib)
set(ENV{PATH} ${ANDROID_BIN_DIR}:$ENV{PATH})
set(ENV{ANDROID_DATA} ${ANDROID_ROOT}/data)
set(ENV{ANDROID_ROOT} ${ANDROID_ROOT})

set(JAVALIB_DIR ${CMAKE_BINARY_DIR}/src/deps/javalibrary-)

# First we process all our core jar files

set(ENV{BOOTCLASSPATH} ${ANDROID_JAR_DIR}/core.jar)
process_installed_android_jar(core ${JAVALIB_DIR}core/core.jar ${CMAKE_BINARY_DIR}/android_jar_processing_intermediary)

set(ENV{BOOTCLASSPATH} ${ANDROID_JAR_DIR}/core.jar:${ANDROID_JAR_DIR}/bouncycastle.jar)
process_installed_android_jar(bouncycastle ${JAVALIB_DIR}bouncycastle/bouncycastle.jar ${CMAKE_BINARY_DIR}/android_jar_processing_intermediary)

set(ENV{BOOTCLASSPATH} ${ANDROID_JAR_DIR}/core.jar)
process_installed_android_jar(ext ${JAVALIB_DIR}ext/ext.jar ${CMAKE_BINARY_DIR}/android_jar_processing_intermediary)

set(ENV{BOOTCLASSPATH} ${ANDROID_JAR_DIR}/core.jar:${ANDROID_JAR_DIR}/bouncycastle.jar:${ANDROID_JAR_DIR}/conscrypt.jar)
process_installed_android_jar(conscrypt ${JAVALIB_DIR}conscrypt/conscrypt.jar ${CMAKE_BINARY_DIR}/android_jar_processing_intermediary conscrypt)

set(ENV{BOOTCLASSPATH} ${ANDROID_JAR_DIR}/core.jar:${ANDROID_JAR_DIR}/bouncycastle.jar:${ANDROID_JAR_DIR}/conscrypt.jar:${ANDROID_JAR_DIR}/ext.jar:${ANDROID_JAR_DIR}/okhttp.jar)
process_installed_android_jar(okhttp ${JAVALIB_DIR}okhttp/okhttp.jar ${CMAKE_BINARY_DIR}/android_jar_processing_intermediary)

set(ENV{BOOTCLASSPATH} ${ANDROID_JAR_DIR}/core.jar:${ANDROID_JAR_DIR}/bouncycastle.jar:${ANDROID_JAR_DIR}/conscrypt.jar:${ANDROID_JAR_DIR}/ext.jar:${ANDROID_JAR_DIR}/okhttp.jar:${ANDROID_JAR_DIR}/framework.jar)
process_installed_android_jar(framework ${JAVALIB_DIR}frameworks/framework.jar ${CMAKE_BINARY_DIR}/android_jar_processing_intermediary)

set(ENV{BOOTCLASSPATH} ${ANDROID_JAR_DIR}/core.jar:${ANDROID_JAR_DIR}/bouncycastle.jar:${ANDROID_JAR_DIR}/conscrypt.jar:${ANDROID_JAR_DIR}/ext.jar:${ANDROID_JAR_DIR}/okhttp.jar:${ANDROID_JAR_DIR}/framework.jar)
process_installed_android_jar(voip-common ${JAVALIB_DIR}voip/voip-common.jar ${CMAKE_BINARY_DIR}/android_jar_processing_intermediary)

set(ENV{BOOTCLASSPATH} ${ANDROID_JAR_DIR}/core.jar:${ANDROID_JAR_DIR}/bouncycastle.jar:${ANDROID_JAR_DIR}/conscrypt.jar:${ANDROID_JAR_DIR}/ext.jar:${ANDROID_JAR_DIR}/okhttp.jar:${ANDROID_JAR_DIR}/framework.jar:${ANDROID_JAR_DIR}/voip-common.jar)
process_installed_android_jar(telephony-common ${JAVALIB_DIR}telephony/telephony-common.jar ${CMAKE_BINARY_DIR}/android_jar_processing_intermediary)

set(ENV{BOOTCLASSPATH} ${ANDROID_JAR_DIR}/core.jar:${ANDROID_JAR_DIR}/bouncycastle.jar:${ANDROID_JAR_DIR}/conscrypt.jar:${ANDROID_JAR_DIR}/ext.jar:${ANDROID_JAR_DIR}/okhttp.jar:${ANDROID_JAR_DIR}/framework.jar:${ANDROID_JAR_DIR}/voip-common.jar:${ANDROID_JAR_DIR}/telephony-common.jar)
process_installed_android_jar(framework2 ${JAVALIB_DIR}frameworks/framework2.jar ${CMAKE_BINARY_DIR}/android_jar_processing_intermediary)

set(ENV{BOOTCLASSPATH} ${ANDROID_JAR_DIR}/core.jar:${ANDROID_JAR_DIR}/bouncycastle.jar:${ANDROID_JAR_DIR}/conscrypt.jar:${ANDROID_JAR_DIR}/ext.jar:${ANDROID_JAR_DIR}/okhttp.jar:${ANDROID_JAR_DIR}/framework.jar:${ANDROID_JAR_DIR}/voip-common.jar:${ANDROID_JAR_DIR}/telephony-common.jar)
process_installed_android_jar(launch ${CMAKE_BINARY_DIR}/src/launcher/launch.jar ${CMAKE_BINARY_DIR}/android_jar_processing_intermediary)

set(ENV{BOOTCLASSPATH} ${ANDROID_JAR_DIR}/core.jar:${ANDROID_JAR_DIR}/bouncycastle.jar:${ANDROID_JAR_DIR}/conscrypt.jar:${ANDROID_JAR_DIR}/ext.jar:${ANDROID_JAR_DIR}/okhttp.jar:${ANDROID_JAR_DIR}/framework.jar:${ANDROID_JAR_DIR}/voip-common.jar:${ANDROID_JAR_DIR}/telephony-common.jar)
process_installed_android_jar(shashlik ${JAVALIB_DIR}shashlik/shashlik.jar ${CMAKE_BINARY_DIR}/android_jar_processing_intermediary)

set(ENV{BOOTCLASSPATH} ${ANDROID_JAR_DIR}/core.jar:${ANDROID_JAR_DIR}/bouncycastle.jar:${ANDROID_JAR_DIR}/conscrypt.jar:${ANDROID_JAR_DIR}/ext.jar:${ANDROID_JAR_DIR}/okhttp.jar:${ANDROID_JAR_DIR}/framework.jar:${ANDROID_JAR_DIR}/voip-common.jar:${ANDROID_JAR_DIR}/telephony-common.jar)
process_installed_android_jar(am ${JAVALIB_DIR}am/am.jar ${CMAKE_BINARY_DIR}/android_jar_processing_intermediary)

# Then we process apk files (because we need the jar files to do this bit)

set(ENV{BOOTCLASSPATH} ${ANDROID_JAR_DIR}/core.jar:${ANDROID_JAR_DIR}/bouncycastle.jar:${ANDROID_JAR_DIR}/conscrypt.jar:${ANDROID_JAR_DIR}/ext.jar:${ANDROID_JAR_DIR}/okhttp.jar:${ANDROID_JAR_DIR}/framework.jar:${ANDROID_JAR_DIR}/voip-common.jar:${ANDROID_JAR_DIR}/telephony-common.jar)
process_jar_to_apk(
    SettingsProvider
    ${CMAKE_BINARY_DIR}/src/deps/javalibrary-settingsprovider
    ${ANDROID_ROOT}/system/app
    ${GENERAL_SOURCE_PATH}/android-frameworks-base/packages/SettingsProvider
    ${CMAKE_BINARY_DIR}/src/deps/javalibrary-settingsprovider/package-export.apk
    ${CMAKE_BINARY_DIR}/android_jar_processing_intermediary)

process_jar_to_apk(
    SystemUI
    ${CMAKE_BINARY_DIR}/src/deps/javalibrary-systemui
    ${ANDROID_ROOT}/system/app
    ${GENERAL_SOURCE_PATH}/android-frameworks-base/packages/SystemUI
    ${CMAKE_BINARY_DIR}/src/deps/javalibrary-systemui/package-export.apk
    ${CMAKE_BINARY_DIR}/android_jar_processing_intermediary)

# target Dex: SettingsProvider
# out/host/linux-x86/bin/dx -JXms16M -JXmx2048M --dex --output=out/target/common/obj/APPS/SettingsProvider_intermediates/noproguard.classes-with-local.dex     out/target/common/obj/APPS/SettingsProvider_intermediates/noproguard.classes.jar
# Copying: out/target/common/obj/APPS/SettingsProvider_intermediates/noproguard.classes.dex
# out/host/linux-x86/bin/acp -fp out/target/common/obj/APPS/SettingsProvider_intermediates/noproguard.classes-with-local.dex out/target/common/obj/APPS/SettingsProvider_intermediates/noproguard.classes.dex

# target Package: SettingsProvider (out/target/product/vexpress/obj/APPS/SettingsProvider_intermediates/package.apk)
# touch out/target/product/vexpress/obj/APPS/SettingsProvider_intermediates//dummy
# (cd out/target/product/vexpress/obj/APPS/SettingsProvider_intermediates/ && jar cf package.apk dummy)
# zip -qd out/target/product/vexpress/obj/APPS/SettingsProvider_intermediates/package.apk dummy
# rm out/target/product/vexpress/obj/APPS/SettingsProvider_intermediates//dummy
# out/host/linux-x86/bin/aapt package -u -z -c en_US,normal,ldpi,mdpi,hdpi,xhdpi,xxhdpi,nodpi --preferred-configurations hdpi -M frameworks/base/packages/SettingsProvider/AndroidManifest.xml -S frameworks/base/packages/SettingsProvider/res  -I out/target/common/obj/APPS/framework-res_intermediates/package-export.apk --min-sdk-version 17 --target-sdk-version 17 --product tablet,nosdcard --version-code 17 --version-name 4.2.1-68   -F out/target/product/vexpress/obj/APPS/SettingsProvider_intermediates/package.apk
# _adtp_classes_dex=out/target/common/obj/APPS/SettingsProvider_intermediates/classes.dex; cp out/target/common/obj/APPS/SettingsProvider_intermediates/noproguard.classes.dex $_adtp_classes_dex && out/host/linux-x86/bin/aapt add -k out/target/product/vexpress/obj/APPS/SettingsProvider_intermediates/package.apk $_adtp_classes_dex && rm -f $_adtp_classes_dex
#  'out/target/common/obj/APPS/SettingsProvider_intermediates/classes.dex' as 'classes.dex'...
# if [ -d out/target/common/obj/APPS/SettingsProvider_intermediates/classes ] ; then java_res_jar_flags=$(find out/target/common/obj/APPS/SettingsProvider_intermediates/classes -type f -a -not -name "*.class" | sed -e "s?^out/target/common/obj/APPS/SettingsProvider_intermediates/classes/? -C out/target/common/obj/APPS/SettingsProvider_intermediates/classes ?"); if [ -n "$java_res_jar_flags" ] ; then echo $java_res_jar_flags >out/target/product/vexpress/obj/APPS/SettingsProvider_intermediates/java_res_jar_flags; jar uf out/target/product/vexpress/obj/APPS/SettingsProvider_intermediates/package.apk $java_res_jar_flags; fi; fi
# mv out/target/product/vexpress/obj/APPS/SettingsProvider_intermediates/package.apk out/target/product/vexpress/obj/APPS/SettingsProvider_intermediates/package.apk.unsigned
# java -jar out/host/linux-x86/framework/signapk.jar build/target/product/security/platform.x509.pem build/target/product/security/platform.pk8 out/target/product/vexpress/obj/APPS/SettingsProvider_intermediates/package.apk.unsigned out/target/product/vexpress/obj/APPS/SettingsProvider_intermediates/package.apk.signed
# mv out/target/product/vexpress/obj/APPS/SettingsProvider_intermediates/package.apk.signed out/target/product/vexpress/obj/APPS/SettingsProvider_intermediates/package.apk
# mv out/target/product/vexpress/obj/APPS/SettingsProvider_intermediates/package.apk out/target/product/vexpress/obj/APPS/SettingsProvider_intermediates/package.apk.unaligned
# out/host/linux-x86/bin/zipalign -f 4 out/target/product/vexpress/obj/APPS/SettingsProvider_intermediates/package.apk.unaligned out/target/product/vexpress/obj/APPS/SettingsProvider_intermediates/package.apk.aligned
# mv out/target/product/vexpress/obj/APPS/SettingsProvider_intermediates/package.apk.aligned out/target/product/vexpress/obj/APPS/SettingsProvider_intermediates/package.apk
# Install: out/target/product/vexpress/system/app/SettingsProvider.apk
# out/host/linux-x86/bin/acp -fp out/target/product/vexpress/obj/APPS/SettingsProvider_intermediates/package.apk out/target/product/vexpress/system/app/SettingsProvider.apk


# set(ENV{BOOTCLASSPATH} ${ANDROID_JAR_DIR}/core.jar:${ANDROID_JAR_DIR}/bouncycastle.jar:${ANDROID_JAR_DIR}/conscrypt.jar:${ANDROID_JAR_DIR}/ext.jar:${ANDROID_JAR_DIR}/okhttp.jar:${ANDROID_JAR_DIR}/framework.jar:${ANDROID_JAR_DIR}/voip-common.jar:${ANDROID_JAR_DIR}/telephony-common.jar:${ANDROID_JAR_DIR}/framework2.jar)
# process_installed_android_jar(packageinstaller ${JAVALIB_DIR}packageinstaller/packageinstaller.jar ${CMAKE_BINARY_DIR}/android_jar_processing_intermediary)

# message(STATUS "Copying: core classes-full-debug.jar to classes-jarjar.jar")
# out/host/linux-x86/bin/acp -fp out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes-full-debug.jar out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes-jarjar.jar
# message(STATUS "Copying: core classes.jar to emma_out/lib/classes-jarjar.jar")
# out/host/linux-x86/bin/acp -fp out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes-jarjar.jar out/target/common/obj/JAVA_LIBRARIES/core_intermediates/emma_out/lib/classes-jarjar.jar
# message(STATUS "Copying: core classes.jar to classes.jar")
# out/host/linux-x86/bin/acp -fp out/target/common/obj/JAVA_LIBRARIES/core_intermediates/emma_out/lib/classes-jarjar.jar out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes.jar
# message(STATUS "Copying: core classes.jar to noproguard.classes.jar")
# out/host/linux-x86/bin/acp -fp out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes.jar out/target/common/obj/JAVA_LIBRARIES/core_intermediates/noproguard.classes.jar
# 
# message(STATUS "Creating dex from classes.jar for target core")
# out/host/linux-x86/bin/dx -JXms16M -JXmx2048M --dex --output=out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes-with-local.dex    --core-library out/target/common/obj/JAVA_LIBRARIES/core_intermediates/core-classes.jar
# message(STATUS "Copying classes.dex")
# out/host/linux-x86/bin/acp -fp out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes-with-local.dex out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes.dex
# message(STATUS "Constructing javalib.jar for target core")
# target Jar: core (out/target/common/obj/JAVA_LIBRARIES/core_intermediates/javalib.jar)
# touch out/target/common/obj/JAVA_LIBRARIES/core_intermediates//dummy
# # create jar from dummy
# (cd out/target/common/obj/JAVA_LIBRARIES/core_intermediates/ && jar cf javalib.jar dummy)
# # remove the dummy file from the jar (and from disk)
# zip -qd out/target/common/obj/JAVA_LIBRARIES/core_intermediates/javalib.jar dummy
# rm out/target/common/obj/JAVA_LIBRARIES/core_intermediates//dummy
# # add the dex to the jar
# zip -qj out/target/common/obj/JAVA_LIBRARIES/core_intermediates/javalib.jar out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes.dex
# 
# if [ -d out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes ] ; then
#     java_res_jar_flags=$(find out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes -type f -a -not -name "*.class" | sed -e "s?^out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes/? -C out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes ?");
#     if [ -n "$java_res_jar_flags" ] ; then
#         echo $java_res_jar_flags >out/target/common/obj/JAVA_LIBRARIES/core_intermediates/java_res_jar_flags; jar uf out/target/common/obj/JAVA_LIBRARIES/core_intermediates/javalib.jar $java_res_jar_flags;
#     fi;
# fi
# # update the jar with special local things (jar-arg-list in ABS, generated from PRIVATE_EXTRA_JAR_ARGS)
# jar uf out/target/common/obj/JAVA_LIBRARIES/core_intermediates/javalib.jar @out/target/common/obj/JAVA_LIBRARIES/core_intermediates/jar-arg-list
# 
# 
# out/host/linux-x86/bin/acp -fp out/target/common/obj/JAVA_LIBRARIES/core_intermediates/javalib.jar out/target/product/generic/dex_bootjars/system/framework/core_nodex.jar
# out/host/linux-x86/bin/acp -fp out/target/product/generic/dex_bootjars/system/framework/core_nodex.jar out/target/product/generic/obj/JAVA_LIBRARIES/core_intermediates/javalib.jar
# 
# # Install and pre-optimise core.jar
# message(STATUS "Installing and preoptimizing (creating odex) jar for target core")
# Dexpreopt Boot Jar: out/target/product/generic/dex_bootjars/system/framework/core.odex
# # remove old odex, because dex-preopt requires there to not be one already
# rm -f out/target/product/generic/dex_bootjars/system/framework/core.odex
# mkdir -p out/target/product/generic/dex_bootjars/system/framework/
# # copy core.jar
# out/host/linux-x86/bin/acp -fp out/target/common/obj/JAVA_LIBRARIES/core_intermediates/javalib.jar out/target/product/generic/dex_bootjars/system/framework/core.jar
# # run dex-preopt (not installed)
# dalvik/tools/dex-preopt
#     --dexopt=host/linux-x86/bin/dexopt
#     --build-dir=out
#     --product-dir=target/product/generic/dex_bootjars
#     --boot-dir=system/framework
#     --boot-jars=core:conscrypt:okhttp:core-junit:bouncycastle:ext:framework:framework2:telephony-common:voip-common:mms-common:android.policy:services:apache-xml:webviewchromium
#     --uniprocessor
#     target/product/generic/dex_bootjars/system/framework/core.jar
#     target/product/generic/dex_bootjars/system/framework/core.odex
# # copy
# out/host/linux-x86/bin/acp -fp out/target/product/generic/dex_bootjars/system/framework/core.odex out/target/product/generic/obj/JAVA_LIBRARIES/core_intermediates/javalib.odex
# 
# Install: out/target/product/generic/system/framework/core.odex
# out/host/linux-x86/bin/acp -fp out/target/product/generic/obj/JAVA_LIBRARIES/core_intermediates/javalib.odex out/target/product/generic/system/framework/core.odex



# Install: out/target/product/generic/system/framework/core.jar
# out/host/linux-x86/bin/acp -fp out/target/product/generic/obj/JAVA_LIBRARIES/core_intermediates/javalib.jar out/target/product/generic/system/framework/core.jar

# Notice file: libcore/NOTICE -- out/target/product/generic/obj/NOTICE_FILES/src//system/framework/core.jar.txt
# mkdir -p out/target/product/generic/obj/NOTICE_FILES/src//system/framework/
# cat libcore/NOTICE > out/target/product/generic/obj/NOTICE_FILES/src//system/framework/core.jar.txt
# 
# target Prebuilt: tzdata (out/target/product/generic/obj/ETC/tzdata_intermediates/tzdata)
# out/host/linux-x86/bin/acp -fp bionic/libc/zoneinfo/tzdata out/target/product/generic/obj/ETC/tzdata_intermediates/tzdata
# Install: out/target/product/generic/system/usr/share/zoneinfo/tzdata
# out/host/linux-x86/bin/acp -fp out/target/product/generic/obj/ETC/tzdata_intermediates/tzdata out/target/product/generic/system/usr/share/zoneinfo/tzdata