








/*

#include "./../../../roots/lakes/bubbles/prepare.computer"


#include "./../../../roots/lakes/create.computer"

#include "./../../../roots/lakes/resize.computer"

#include "./../../../roots/lakes/free.computer"


#include "./../../../roots/lakes/stones/compare.computer"

#include "./../../../roots/lakes/stones/measure.computer"

#include "./../../../roots/lakes/stones/copy.computer"


#include "./../../../branches/lakes/prepare.computer"

*/


void *  write_fst_branches_lakes_waves

(

void *  that_stones_names,

void *  that_stones_contents

)

{




void  *   note_waters_counts = that_fst_roots_lakes_bubbles_prepare;

create_fst_roots_lakes  ( & note_waters_counts );




void * note_waters_sizes = that_fst_roots_lakes_bubbles_prepare;

create_fst_roots_lakes ( & note_waters_sizes );




void  *   note_waters_results = that_fst_roots_lakes_bubbles_prepare;

create_fst_roots_lakes  (  & note_waters_results  );









void * note_waters_lengths_names = that_fst_roots_lakes_bubbles_prepare;

create_fst_roots_lakes ( & note_waters_lengths_names );




void  *   note_waters_lengths_wrote = that_fst_roots_lakes_bubbles_prepare;

create_fst_roots_lakes  (  & note_waters_lengths_wrote  );




void  *  note_waters_lengths_targets = that_fst_roots_lakes_bubbles_prepare;

create_fst_roots_lakes  (  & note_waters_lengths_targets  );














* ( __uint64_t * ) note_waters_counts   =   1;


while

(

* ( __uint64_t * ) note_waters_counts
<=
* ( __uint64_t * ) that_fst_branches_lakes  [ 0 ] [ 1 ]

)

{







compare_fst_roots_lakes_stones

(

that_stones_names,

that_fst_branches_lakes  [ * ( __uint64_t * ) note_waters_counts ] [ 0 ],


& note_waters_results

);








if   (   * ( __uint64_t * ) note_waters_results   ==   1   )

{







measure_fst_roots_lakes_stones

(

that_stones_contents,

& note_waters_lengths_wrote

);





measure_fst_roots_lakes_stones

(

that_fst_branches_lakes  [ * ( __uint64_t * ) note_waters_counts ] [ 1 ],

& note_waters_lengths_targets

);









if

(

* ( __uint64_t * ) note_waters_lengths_wrote
<=
* ( __uint64_t * ) note_waters_lengths_targets

)

{





copy_fst_roots_lakes_stones

(

that_fst_branches_lakes  [ * ( __uint64_t * ) note_waters_counts ] [ 1 ],

that_stones_contents

);





// char for one bytes

* ( __uint64_t * ) note_waters_sizes   =   1  *  ( 1 + * ( __uint64_t * ) note_waters_lengths_wrote );


resize_fst_roots_lakes

(

& that_fst_branches_lakes  [ * ( __uint64_t * ) note_waters_counts ] [ 1 ],

note_waters_sizes

);


}






else if

(

* ( __uint64_t * ) note_waters_lengths_wrote
>
* ( __uint64_t * ) note_waters_lengths_targets

)

{





// char for one bytes

* ( __uint64_t * ) note_waters_sizes   =   1  *  ( 1 + * ( __uint64_t * ) note_waters_lengths_wrote );


resize_fst_roots_lakes

(

& that_fst_branches_lakes  [ * ( __uint64_t * ) note_waters_counts ] [ 1 ],

note_waters_sizes

);





copy_fst_roots_lakes_stones

(

that_fst_branches_lakes  [ * ( __uint64_t * ) note_waters_counts ] [ 1 ],

that_stones_contents

);





}





free_fst_roots_lakes  (  & note_waters_counts  );

free_fst_roots_lakes  (  & note_waters_results  );

free_fst_roots_lakes  (  & note_waters_sizes  );


free_fst_roots_lakes  (  & note_waters_lengths_wrote  );

free_fst_roots_lakes  (  & note_waters_lengths_targets  );


free_fst_roots_lakes  (  & note_waters_lengths_names  );





return  that_fst_roots_lakes_bubbles_prepare;

}








* ( __uint64_t * ) note_waters_counts   =   * ( __uint64_t * ) note_waters_counts   +   1;

}


















/*

read over, create a new fish

*/


measure_fst_roots_lakes_stones ( that_stones_names, & note_waters_lengths_names );

measure_fst_roots_lakes_stones ( that_stones_contents, & note_waters_lengths_wrote );







/*

void *  for   eight bytes   on   sixtie-four   device

*/


* ( __uint64_t * ) note_waters_sizes   =   8   *   (   1   +   1   +   * ( __uint64_t * ) that_fst_branches_lakes [ 0 ] [ 1 ]   );



resize_fst_roots_lakes  (

( void * * ) & that_fst_branches_lakes,

note_waters_sizes

);








* ( __uint64_t * ) note_waters_sizes   =   8 * 2;



create_fst_roots_lakes

(

( void * * ) & that_fst_branches_lakes  [ * ( __uint64_t * ) note_waters_counts ]

);



resize_fst_roots_lakes

(

( void * * ) & that_fst_branches_lakes  [ * ( __uint64_t * ) note_waters_counts ],

note_waters_sizes

);










// char for one bytes

* ( __uint64_t * ) note_waters_sizes   =   1   *   (  1  +  * ( __uint64_t * ) note_waters_lengths_names  );



create_fst_roots_lakes

(

& that_fst_branches_lakes  [ * ( __uint64_t * ) note_waters_counts ] [ 0 ]

);



resize_fst_roots_lakes

(

& that_fst_branches_lakes  [ * ( __uint64_t * ) note_waters_counts ] [ 0 ],

note_waters_sizes

);



copy_fst_roots_lakes_stones

(

that_fst_branches_lakes [ * ( __uint64_t * ) note_waters_counts ] [ 0 ],

that_stones_names

);








// char for one bytes

* ( __uint64_t * ) note_waters_sizes   =   1   *   (  1  +  * ( __uint64_t * ) note_waters_lengths_wrote  );



create_fst_roots_lakes

(

& that_fst_branches_lakes  [ * ( __uint64_t * ) note_waters_counts ] [ 1 ]

);



resize_fst_roots_lakes

(

& that_fst_branches_lakes  [ * ( __uint64_t * ) note_waters_counts ] [ 1 ],

note_waters_sizes

);




copy_fst_roots_lakes_stones

(

that_fst_branches_lakes [ * ( __uint64_t * ) note_waters_counts ] [ 1 ],

that_stones_contents

);








* ( __uint64_t * ) that_fst_branches_lakes  [ 0 ] [ 1 ]   =   * ( __uint64_t * ) that_fst_branches_lakes  [ 0 ] [ 1 ]  +  1;









free_fst_roots_lakes  (  & note_waters_counts  );

free_fst_roots_lakes  (  & note_waters_results  );

free_fst_roots_lakes  (  & note_waters_sizes  );


free_fst_roots_lakes  (  & note_waters_lengths_names  );

free_fst_roots_lakes  (  & note_waters_lengths_wrote  );

free_fst_roots_lakes  (  & note_waters_lengths_targets  );









return  that_fst_roots_lakes_bubbles_prepare;

}
