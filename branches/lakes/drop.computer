





void *  drop_fst_branches_lakes

(  void *  that_stones_names  )

{




void * note_waters_counts = that_fst_roots_lakes_bubbles_prepare;

create_fst_roots_lakes  ( & note_waters_counts );



void * note_waters_results = that_fst_roots_lakes_bubbles_prepare;

create_fst_roots_lakes  ( & note_waters_results );



void * note_waters_sizes = that_fst_roots_lakes_bubbles_prepare;

create_fst_roots_lakes ( & note_waters_sizes );



void * note_waters_switches = that_fst_roots_lakes_bubbles_prepare;

create_fst_roots_lakes  (  & note_waters_switches  );

* ( __uint64_t * ) note_waters_switches   =   0;














* ( __uint64_t * ) note_waters_counts   =   1;
  
while

(

* ( __uint64_t * ) note_waters_counts  <=   * ( __uint64_t * ) that_fst_branches_lakes [ 0 ] [ 1 ]

)

{




if  (  * ( __uint64_t * ) note_waters_switches   ==   0  )

{



compare_fst_roots_lakes_stones

(

that_stones_names,

that_fst_branches_lakes  [ * ( __uint64_t * ) note_waters_counts ] [ 0 ],


& note_waters_results

);



  
if  (   * ( __uint64_t * ) note_waters_results   ==   1   )

{


free_fst_roots_lakes  (  & that_fst_branches_lakes  [ * ( __uint64_t * ) note_waters_counts ] [ 0 ]  );

free_fst_roots_lakes  (  & that_fst_branches_lakes  [ * ( __uint64_t * ) note_waters_counts ] [ 1 ]  );

free_fst_roots_lakes  (  ( void * * ) & that_fst_branches_lakes  [ * ( __uint64_t * ) note_waters_counts ]  );


* ( __uint64_t * ) note_waters_switches  =  1;


}




}





else if  (  * ( __uint64_t * ) note_waters_switches  ==  1  )

{

that_fst_branches_lakes [ * ( __uint64_t * ) note_waters_counts  -  1 ]
=
that_fst_branches_lakes [ * ( __uint64_t * ) note_waters_counts ];

}








* ( __uint64_t * ) note_waters_counts   =   * ( __uint64_t * ) note_waters_counts   +   1;

}












if  (  * ( __uint64_t * ) note_waters_switches   ==   1  )

{



* ( __uint64_t * ) that_fst_branches_lakes [ 0 ] [ 1 ]  =  * ( __uint64_t * ) that_fst_branches_lakes [ 0 ] [ 1 ]   -   1;




* ( __uint64_t * ) note_waters_sizes  =  8  *  ( 1  +  * ( __uint64_t * ) that_fst_branches_lakes  [ 0 ] [ 1 ] );


resize_fst_roots_lakes

(

( void * * ) & that_fst_branches_lakes,

note_waters_sizes

);


}







free_fst_roots_lakes  ( & note_waters_counts );

free_fst_roots_lakes  ( & note_waters_results  );

free_fst_roots_lakes  ( & note_waters_sizes );

free_fst_roots_lakes  ( & note_waters_switches );
  




  
return  that_fst_roots_lakes_bubbles_prepare;

}



