,,

AT

( test )

( return Ok )




,,

AT+CWMODE?

( ask mode )

( return  +CWMODE:<mode>\n\nOK )


AT+CWMODE = <mode>

( set mode )

( <mode> = 1 for station )

( <mode> = 2 for ap )

( <mode> = 3 for station and ap )


( return OK )

( take effect after reboot )




,,

AT+CWLAP

( list wifi found )

( return +CWLAP: <ecn>,<ssid>,<rssi>[,<mode>]\n\nOK )


( <ecn> for encryption method )

( <ecn> = 0 for open )

( <ecn> = 1 for wep )

( <ecn> = 2 for wpa_psk )

( <ecn> = 3 for wpa2_psk )

( <ecn> = 4 for wpa_wpa2_psk )


( <ssid> for access point name )


( <rssi> for signal intensity )


( <mode> for connection mode )

( <mode> = 0 for manual connection )

( <mode> = 1 for auto connection )




,,

AT+CWJAP?

( return +CWJAP:<ssid>\n\nOK )


AT+CWJAP=<ssid>,<password>

( join wifi )

( if success return OK )

( if fail return ERROR )




,,

AT+CWQAP=?

( return OK )


AT+CWQAP

( quit wifi )

( return OK )




,,

AT+CWSAP?

( ask access point )


AT+CWSAP=<ssid>,<password>,<chl>,<ecn>

( set access point )

( if success return OK )


( <chl> for channel number )




,,

( create tcp/udp connection )


AT+CIPSTART=<type>,<address>,<port>

( if +CIPMUX=0 )

( single way connection )


AT+CIPSTART=<id>,<type>,<address>,<port>

( if +CIPMUX=1 )

( multiplex connection )


( if correct format return OK )

( if wrong format return +CME ERROR:invalid input value )

( if connection success return CONNECT OK/<id>,CONNECT OK )

( if connection already exist return ALREADY CONNECT )

( if connection fail return CONNECTION FAIL/<id>,CONNECT FAIL )


( <id> value zero to four, number zero cound crest client or server connection )

( <type> for connection type, value "TCP"/"UDP" )




,,

AT+CIPSTATUS?

( return OK )


AT+CIPSTATUS

( get connection status )


( if AT+CIPMUX=0 return OK\n\nSTATE:<sl_state> )

( if AT+CIPMUX=1 return OK \n\nSTATE:<ml_state> )

( if configured as server return STATE:IP STATUS\nS:<sid>,<port>,<server state>\nC:<cid>,<TCP/UDP>,<ip address>,<port>,<client state> )


( <sl_state> for status of single connection )

( <sl_state>=IP INITIAL for initialization )

( <sl_state>=IP STATUS for getting local ip status )

( <sl_state>=TCP/CONNECTING/(CONNECTION/UDP) for tcp connecting / udp port registration in progress )

( <sl_state>=CONNECT OK for connection established successfully )

( <sl_state>=TCP CLOSING/UDP CLOSING for tcp closing or udp cancellation )


( <ml_state> for multiple connection )

( <ml_state>=IP INITIAL for initialization )

( <ml_state>=IP STATUS for getting local ip status )


( <sid> for server id )

( <sid> value 0 or 1 )


( <server state> for server status )

( <server state>=OPENING for opening )

( <server state>=LISTENING for listening )

( <server state>=CLOSING for closing )


( <cid> for client id )

( <cid> value 0 to 4 )


( <client state> for cient status )

( <client state>=CONNECTED for connected )

( <client state>=CLOSED for closed )