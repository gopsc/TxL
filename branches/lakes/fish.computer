






void  *   fish_fst_branches_lakes

(

void *  that_stones_names,

void ** that_silts_results

)

{









void * note_waters_counts = that_fst_roots_lakes_bubbles_prepare;

create_fst_roots_lakes ( & note_waters_counts );




void * note_waters_results = that_fst_roots_lakes_bubbles_prepare;
 
create_fst_roots_lakes ( & note_waters_results );












* ( __uint64_t * ) note_waters_counts  =  1;


while

(

* ( __uint64_t * ) note_waters_counts  <=  * ( __uint64_t * ) that_fst_branches_lakes  [ 0 ] [ 1 ]

)

{






compare_fst_roots_lakes_stones

(

that_stones_names,

that_fst_branches_lakes  [  * ( __uint64_t * ) note_waters_counts  ] [ 0 ],


& note_waters_results

);






if   (   * ( __uint64_t * ) note_waters_results   ==   1   )

{





* that_silts_results   =   that_fst_branches_lakes  [  * ( __uint64_t * ) note_waters_counts  ] [ 1 ];






free_fst_roots_lakes  (  & note_waters_counts  );

free_fst_roots_lakes  (  & note_waters_results  );


return  that_fst_roots_lakes_bubbles_prepare;

}







* ( __uint64_t * ) note_waters_counts  =  * ( __uint64_t * ) note_waters_counts   +   1;
 
}
















* that_silts_results   =  that_fst_roots_lakes_bubbles_prepare;








free_fst_roots_lakes ( & note_waters_counts );

free_fst_roots_lakes ( & note_waters_results );
 
 
return  that_fst_roots_lakes_bubbles_prepare;

}

