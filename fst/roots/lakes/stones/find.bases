

#include <stdlib.h>




#ifndef added_fst_roots_lakes_stones_find

#define added_fst_roots_lakes_stones_find




void * find_fst_roots_lakes_stones

(

void * that_stones_targets,

void * that_stones_found,

void * * that_waters_results

)

{

























if (  ( void * ) ( void * * ) that_waters_results == NULL  )

{

return NULL;

}
















if (  ( void * ) that_stones_targets == NULL  )

{

return NULL;

}









if (  ( void * ) that_stones_found == NULL  )

{

return NULL;

}









if (  ( void * ) * ( void * * ) that_waters_results != NULL  )

{

return NULL;

}

























void * note_silts_lengths_targets = NULL;









while ( note_silts_lengths_targets == NULL )

{

note_silts_lengths_targets = malloc (  1 * sizeof ( int )  );

}









* ( int * ) note_silts_lengths_targets = 0;
















* ( int * ) note_silts_lengths_targets = 0;









while (  * (  ( char * ) that_stones_targets  +  * ( int * ) note_silts_lengths_targets  )  !=  '\0'  )

{

* ( int * ) note_silts_lengths_targets  =  * ( int * ) note_silts_lengths_targets  +  1;

}

























void * note_silts_lengths_found = NULL;









while ( note_silts_lengths_found == NULL )

{

note_silts_lengths_found = malloc (  1 *  sizeof ( int )  );

}









* ( int * ) note_silts_lengths_found = 0;
















* ( int * ) note_silts_lengths_found = 0;









while (  * (  ( char * ) that_stones_found  +  * ( int * ) note_silts_lengths_found  )  !=  '\0'  )

{

* ( int * ) note_silts_lengths_found  =  * ( int * ) note_silts_lengths_found  +  1;

}

























if (  * ( int * ) note_silts_lengths_targets  <  * ( int * ) note_silts_lengths_found  )

{

























* that_waters_results = NULL;

























* ( int * ) note_silts_lengths_targets = 0;









if ( note_silts_lengths_targets != NULL )

{

free ( note_silts_lengths_targets );

}









note_silts_lengths_targets = NULL;
















* ( int * ) note_silts_lengths_found = 0;









if ( note_silts_lengths_found != NULL )

{

free ( note_silts_lengths_found );

}









note_silts_lengths_found = NULL;

























return NULL;









}

























void * note_silts_counts_targets = NULL;









while ( note_silts_counts_targets == NULL )

{

note_silts_counts_targets = malloc (  1 *  sizeof ( int )  );

}









* ( int * ) note_silts_counts_targets = 0;
















void * note_silts_counts_found = NULL;









while ( note_silts_counts_found == NULL )

{

note_silts_counts_found = malloc (  1 * sizeof ( int )  );

}









* ( int * ) note_silts_counts_found = 0;
















void * note_silts_switches = NULL;









while ( note_silts_switches == NULL )

{

note_silts_switches = malloc (  1 *  sizeof ( int )  );

}









* ( int * ) note_silts_switches = 0;

























* ( int * ) note_silts_counts_targets = 0;









* ( int * ) note_silts_switches = 0;









while (  * ( int * ) note_silts_counts_targets  <  * ( int * ) note_silts_lengths_targets  )

{

























* ( int * ) note_silts_counts_found = 0;









while (  * ( int * ) note_silts_counts_found  <  * ( int * ) note_silts_lengths_found  )

{

























if

(

* (  ( char * ) that_stones_targets  +  * ( int * ) note_silts_counts_targets  +  * ( int * ) note_silts_counts_found  )

!=

* (  ( char * ) that_stones_found  +  * ( int * ) note_silts_counts_found  )

)

{

























* ( int * ) note_silts_switches = 0;

























break;









}
















else if

(

* (  ( char * ) that_stones_targets  +  * ( int * ) note_silts_counts_targets  +  * ( int * ) note_silts_counts_found  )

==

* (  ( char * ) that_stones_found  +  * ( int * ) note_silts_counts_found  )

)

{


























* ( int * ) note_silts_switches = 1;
















}

























* ( int * ) note_silts_counts_found  =  * ( int * ) note_silts_counts_found  +  1;









}









* ( int * ) note_silts_counts_found = 0;

























if (  * ( int * ) note_silts_switches  ==  1  )

{

























* that_waters_results  =  ( char * ) that_stones_targets  +  * ( int * ) note_silts_counts_targets;










/* ... */














break;









}

























* ( int * ) note_silts_counts_targets  =  * ( int * ) note_silts_counts_targets  +  1;









}









* ( int * ) note_silts_counts_targets = 0;

























* that_waters_results = NULL;

























* ( int * ) note_silts_lengths_targets = 0;









if ( note_silts_lengths_targets != NULL )

{

free ( note_silts_lengths_targets );

}









note_silts_lengths_targets = NULL;
















* ( int * ) note_silts_lengths_found = 0;









if ( note_silts_lengths_found != NULL )

{

free ( note_silts_lengths_found );

}









note_silts_lengths_found = NULL;
















* ( int * ) note_silts_counts_targets = 0;









if ( note_silts_counts_targets != NULL )

{

free ( note_silts_counts_targets );

}









note_silts_counts_targets = NULL;
















* ( int * ) note_silts_counts_found = 0;









if ( note_silts_counts_found != NULL )

{

free ( note_silts_counts_found );

}









note_silts_counts_found = NULL;
















* ( int * ) note_silts_switches = 0;









if ( note_silts_switches != NULL )

{

free  (  note_silts_switches  );

}









note_silts_switches = NULL;

























return  NULL;









}




#endif

