/*

#include  <stdlib.h>

*/


void *  find_fst_roots_lakes_stones

(

void *  that_stones_targets,

void *  that_stones_found,

void ** that_lights_results

)

{




void *  note_waters_lengths_targets = NULL;

note_waters_lengths_targets   =   malloc  (  1  *  sizeof ( __uint64_t )  );



* ( __uint64_t * ) note_waters_lengths_targets   =   0;

while

(

* ( ( char * ) that_stones_targets  +  * ( __uint64_t * ) note_waters_lengths_targets  )   !=   '\0'

)

{

* ( __uint64_t * ) note_waters_lengths_targets   =   * ( __uint64_t * ) note_waters_lengths_targets   +   1;

}




void *  note_waters_lengths_found = NULL;

note_waters_lengths_found   =   malloc  (  1  *  sizeof ( __uint64_t )  );



* ( __uint64_t * ) note_waters_lengths_found   =   0;

while

(

* ( ( char * ) that_stones_found  +  * ( __uint64_t * ) note_waters_lengths_found  )   !=   '\0'

)

{

* ( __uint64_t * ) note_waters_lengths_found   =   * ( __uint64_t * ) note_waters_lengths_found   +   1;

}




if

(

* ( __uint64_t * ) note_waters_lengths_targets
<
* ( __uint64_t * ) note_waters_lengths_found

)

{


free ( note_waters_lengths_targets );

free ( note_waters_lengths_found );


* that_lights_results   =   NULL;

return NULL;

}




void *  note_waters_counts_targets = NULL;

note_waters_counts_targets   =   malloc  (  1  *  sizeof ( __uint64_t )  );



void *  note_waters_counts_found = NULL;

note_waters_counts_found   =   malloc  (  1  *  sizeof ( __uint64_t )  );



void *  note_waters_switches = NULL;

note_waters_switches   =   malloc  (  1  *  sizeof ( __uint64_t )  );

* ( __uint64_t * ) note_waters_switches   =   1;





* ( __uint64_t * ) note_waters_counts_targets   =   0;

while

(

* ( __uint64_t * ) note_waters_counts_targets   <   * ( __uint64_t * ) note_waters_lengths_targets

)

{




* ( __uint64_t * ) note_waters_switches   =   0;




* ( __uint64_t * ) note_waters_counts_found   =   0;

while

(

* ( __uint64_t * ) note_waters_counts_found   <   * ( __uint64_t * ) note_waters_lengths_found

)

{



if

(

* ( ( char * ) that_stones_targets  +  * ( __uint64_t * ) note_waters_counts_targets  +  * ( __uint64_t * ) note_waters_counts_found  )
!=
* ( ( char * ) that_stones_found   +  * ( __uint64_t * ) note_waters_counts_found  )

)

{


* ( __uint64_t * ) note_waters_switches   =   0;

break;


}


else if

(

* ( ( char * ) that_stones_targets  +  * ( __uint64_t * ) note_waters_counts_targets  +  * ( __uint64_t * ) note_waters_counts_found  )
==
* ( ( char * ) that_stones_found  +  * ( __uint64_t * ) note_waters_counts_found  )

)

{

* ( __uint64_t * ) note_waters_switches   =   1;

}




* ( __uint64_t * ) note_waters_counts_found   =   * ( __uint64_t * ) note_waters_counts_found   +   1;

}





if  (  * ( __uint64_t * ) note_waters_switches   ==   1  )

{


* that_lights_results   =   ( char * ) that_stones_targets   +   * ( __uint64_t * ) note_waters_counts_targets;

break;


}




* ( __uint64_t * ) note_waters_counts_targets   =   * ( __uint64_t * ) note_waters_counts_targets   +   1;

}




if  (  * ( __uint64_t * ) note_waters_switches   ==   0  )

{

* that_lights_results   =   NULL;

}




free  (  note_waters_lengths_targets  );

free  (  note_waters_lengths_found );


free  (  note_waters_counts_targets  );

free  (  note_waters_counts_found  );


free  (  note_waters_switches  );


return  NULL;

}