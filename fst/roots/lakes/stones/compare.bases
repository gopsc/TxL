

#include <stdlib.h>




#ifndef added_fst_roots_lakes_stones_compare

#define added_fst_roots_lakes_stones_compare




void * compare_fst_roots_lakes_stones

(

void * that_stones_compared,

void * that_stones_compare,

void * that_silts_results

)

{

























if (  ( void * ) that_stones_compared  ==  ( void * ) NULL  )

{

return  ( void * ) NULL;

}









if (  ( void * ) that_stones_compare  ==  ( void * ) NULL  )

{

return  ( void * ) NULL;

}









if (  ( void * ) that_silts_results  ==  ( void * ) NULL  )

{

return  ( void * ) NULL;

}

























void * note_silts_lengths_compared  =  ( void * ) NULL;









while (  ( void * ) note_silts_lengths_compared  ==  ( void * ) NULL  )

{

/* ( void * ) */  note_silts_lengths_compared   =   ( void * ) malloc (   ( int ) 1   *   ( int ) ( unsigned int ) sizeof ( int )   );

}









/* ( int ) */  * ( int * ) ( void * )  note_silts_lengths_compared   =   ( int ) 0;
















/* ( int ) */  * ( int * ) ( void * )  note_silts_lengths_compared   =   ( int ) 0;









while

(




( char ) * ( char * )


(


( char * ) ( void * ) that_stones_compared


+


( int ) * ( int * ) ( void * ) note_silts_lengths_compared


)




!=




( char ) '\0'




)

{



/* ( int ) */  * ( int * ) ( void * ) note_silts_lengths_compared


=


( int ) * ( int * ) ( void * ) note_silts_lengths_compared


+


( int ) 1;



}

























void * note_silts_lengths_compare  =  ( void * ) NULL;









while (  ( void * ) note_silts_lengths_compare  ==  ( void * ) NULL  )

{

/* ( void * ) */  note_silts_lengths_compare   =   ( void * ) malloc (   ( int ) 1   *   ( int ) ( unsigned int ) sizeof ( int )   );

}









/* ( int ) */  * ( int * ) ( void * )  note_silts_lengths_compare   =   ( int ) 0;
















/* ( int ) */  * ( int * ) ( void * )  note_silts_lengths_compare   =   ( int ) 0;









while

(




( char ) * ( char * )


(


( char * ) ( void * ) that_stones_compare


+


( int ) * ( int * ) ( void * ) note_silts_lengths_compare


)




!=




( char ) '\0'




)

{



/* ( int ) */  * ( int * ) ( void * ) note_silts_lengths_compare

=

( int ) * ( int * ) ( void * )  note_silts_lengths_compare


+


( int ) 1;



}

























void * note_silts_counts  =  ( void * ) NULL;









while (  ( void * ) note_silts_counts  ==  ( void * ) NULL  )

{

/* ( void * ) */  note_silts_counts   =   ( void * ) malloc (   ( int ) 1   *   ( int ) ( unsigned int ) sizeof ( int )   );

}









/* ( int ) */  * ( int * ) ( void * )  note_silts_counts   =   ( int ) 0;

























if (  * ( int * ) note_silts_lengths_compared  !=  * ( int * ) note_silts_lengths_compare  )

{

























* ( int * ) that_silts_results = 0;

























* ( int * ) note_silts_lengths_compared = 0;









if ( note_silts_lengths_compared != NULL )

{

free ( note_silts_lengths_compared );

}









note_silts_lengths_compared = NULL;
















* ( int * ) note_silts_lengths_compare = 0;









if ( note_silts_lengths_compare != NULL )

{

free ( note_silts_lengths_compare );

}









note_silts_lengths_compare = NULL;
















* ( int * ) note_silts_counts = 0;









if ( note_silts_counts != NULL )

{

free ( note_silts_counts );

}









note_silts_counts = NULL;

























return  NULL;









}

























* ( int * ) note_silts_counts = 0;









while (  * ( int * ) note_silts_counts  <  * ( int * ) note_silts_lengths_compared  )

{

























if

(

* (  ( char * ) that_stones_compared  +  * ( int * ) note_silts_counts  )

!=

* (  ( char * ) that_stones_compare  +  * ( int * ) note_silts_counts )

)

{

























* ( int * ) that_silts_results = 0;

























* ( int * ) note_silts_lengths_compared = 0;









if ( note_silts_lengths_compared != NULL )

{

free ( note_silts_lengths_compared );

}









note_silts_lengths_compared = NULL;
















* ( int * ) note_silts_lengths_compare = 0;









if ( note_silts_lengths_compare != NULL )

{

free ( note_silts_lengths_compare );

}









note_silts_lengths_compare = NULL;
















* ( int * ) note_silts_counts = 0;









if ( note_silts_counts != NULL )

{

free ( note_silts_counts  );

}









note_silts_counts = NULL;

























return  NULL;









}

























* ( int * ) note_silts_counts  =  * ( int * ) note_silts_counts  +  1;









}

























* ( int * ) that_silts_results = 1;

























* ( int * ) note_silts_lengths_compared = 0;



if ( note_silts_lengths_compared != NULL )

{

free ( note_silts_lengths_compared );

}



note_silts_lengths_compared = NULL;
















* ( int * ) note_silts_lengths_compare = 0;



if ( note_silts_lengths_compare != NULL )

{

free ( note_silts_lengths_compare );

}



note_silts_lengths_compare = NULL;
















* ( int * ) note_silts_counts = 0;



if ( note_silts_counts != NULL )

{

free ( note_silts_counts  );

}



note_silts_counts = NULL;

























return  NULL;









}




#endif

