



void *  write_fst_branches_lakes

(

void *  that_words_names,

void *  that_words_contents

)

{




void  *   note_numbers_counts = that_fst_roots_lakes_bubbles_prepare;

create_fst_roots_lakes  ( & note_numbers_counts );




void  *   note_numbers_results = that_fst_roots_lakes_bubbles_prepare;

create_fst_roots_lakes  (  & note_numbers_results  );




void * note_numbers_sizes = that_fst_roots_lakes_bubbles_prepare;

create_fst_roots_lakes ( & note_numbers_sizes );









void * note_numbers_lengths_names = that_fst_roots_lakes_bubbles_prepare;

create_fst_roots_lakes ( & note_numbers_lengths_names );




void  *   note_numbers_lengths_wrote = that_fst_roots_lakes_bubbles_prepare;

create_fst_roots_lakes  (  & note_numbers_lengths_wrote  );




void  *  note_numbers_lengths_targets = that_fst_roots_lakes_bubbles_prepare;

create_fst_roots_lakes  (  & note_numbers_lengths_targets  );







* ( __uint64_t * ) note_numbers_counts   =   1;

while

(

* ( __uint64_t * ) note_numbers_counts
<=
* ( __uint64_t * ) that_fst_branches_lakes  [ 0 ] [ 1 ]

)

{




compare_fst_roots_lakes_stones

(

that_words_names,

that_fst_branches_lakes  [ * ( __uint64_t * ) note_numbers_counts ] [ 0 ],

& note_numbers_results

);




if   (   * ( __uint64_t * ) note_numbers_results   ==   1   )

{


measure_fst_roots_lakes_stones

(

that_words_contents,

& note_numbers_lengths_wrote

);


measure_fst_roots_lakes_stones

(

that_fst_branches_lakes  [ * ( __uint64_t * ) note_numbers_counts ] [ 1 ],

& note_numbers_lengths_targets

);




if

(

* ( __uint64_t * ) note_numbers_lengths_wrote
<=
* ( __uint64_t * ) note_numbers_lengths_targets

)

{


copy_fst_roots_lakes_stones

(

that_fst_branches_lakes  [ * ( __uint64_t * ) note_numbers_counts ] [ 1 ],

that_words_contents

);



* ( __uint64_t * ) note_numbers_sizes   =   1  *  ( 1 + * ( __uint64_t * ) note_numbers_lengths_wrote );

resize_fst_roots_lakes

(

& that_fst_branches_lakes  [ * ( __uint64_t * ) note_numbers_counts ] [ 1 ],

note_numbers_sizes

);


}




else if

(

* ( __uint64_t * ) note_numbers_lengths_wrote
>
* ( __uint64_t * ) note_numbers_lengths_targets

)

{


* ( __uint64_t * ) note_numbers_sizes   =   1  *  ( 1 + * ( __uint64_t * ) note_numbers_lengths_wrote );

resize_fst_roots_lakes

(

& that_fst_branches_lakes  [ * ( __uint64_t * ) note_numbers_counts ] [ 1 ],

note_numbers_sizes

);


copy_fst_roots_lakes_stones

(

that_fst_branches_lakes  [ * ( __uint64_t * ) note_numbers_counts ] [ 1 ],

that_words_contents

);


}





free_fst_roots_lakes  (  & note_numbers_counts  );

free_fst_roots_lakes  (  & note_numbers_results  );

free_fst_roots_lakes  (  & note_numbers_sizes  );


free_fst_roots_lakes  (  & note_numbers_lengths_wrote  );

free_fst_roots_lakes  (  & note_numbers_lengths_targets  );


free_fst_roots_lakes  (  & note_numbers_lengths_names  );


return  that_fst_branches_lakes;

}





* ( __uint64_t * ) note_numbers_counts   =   * ( __uint64_t * ) note_numbers_counts   +   1;

}

















/*

read over, create new fish

*/


measure_fst_roots_lakes_stones ( that_words_names, & note_numbers_lengths_names );

measure_fst_roots_lakes_stones ( that_words_contents, & note_numbers_lengths_wrote );






/*

void *  for   four

*/


* ( __uint64_t * ) note_numbers_sizes   =   4   *   (   1   +   1   +   * ( __uint64_t * ) that_fst_branches_lakes [ 0 ] [ 1 ]   );


resize_fst_roots_lakes  (

( void * * ) & that_fst_branches_lakes,

note_numbers_sizes

);






* ( __uint64_t * ) note_numbers_sizes   =   4 * 2;


create_fst_roots_lakes

(

( void * * ) & that_fst_branches_lakes  [ * ( __uint64_t * ) note_numbers_counts ]

);


resize_fst_roots_lakes

(

( void * * ) & that_fst_branches_lakes  [ * ( __uint64_t * ) note_numbers_counts ],

note_numbers_sizes

);








* ( __uint64_t * ) note_numbers_sizes   =   1   *   (  1  +  * ( __uint64_t * ) note_numbers_lengths_names  );


create_fst_roots_lakes

(

& that_fst_branches_lakes  [ * ( __uint64_t * ) note_numbers_counts ] [ 0 ]

);


resize_fst_roots_lakes

(

& that_fst_branches_lakes  [ * ( __uint64_t * ) note_numbers_counts ] [ 0 ],

note_numbers_sizes

);


copy_fst_roots_lakes_stones

(

that_fst_branches_lakes [ * ( __uint64_t * ) note_numbers_counts ] [ 0 ],

that_words_names

);








* ( __uint64_t * ) note_numbers_sizes   =   1   *   (  1  +  * ( __uint64_t * ) note_numbers_lengths_wrote  );


create_fst_roots_lakes

(

& that_fst_branches_lakes  [ * ( __uint64_t * ) note_numbers_counts ] [ 1 ]

);



resize_fst_roots_lakes

(

& that_fst_branches_lakes  [ * ( __uint64_t * ) note_numbers_counts ] [ 1 ],

note_numbers_sizes

);




copy_fst_roots_lakes_stones

(

that_fst_branches_lakes [ * ( __uint64_t * ) note_numbers_counts ] [ 1 ],

that_words_contents

);








* ( __uint64_t * ) that_fst_branches_lakes  [ 0 ] [ 1 ]   =   * ( __uint64_t * ) note_numbers_counts;









free_fst_roots_lakes  (  & note_numbers_counts  );

free_fst_roots_lakes  (  & note_numbers_results  );

free_fst_roots_lakes  (  & note_numbers_sizes  );


free_fst_roots_lakes  (  & note_numbers_lengths_names  );

free_fst_roots_lakes  (  & note_numbers_lengths_wrote  );

free_fst_roots_lakes  (  & note_numbers_lengths_targets  );









return  that_fst_roots_lakes_bubbles_prepare;

}
