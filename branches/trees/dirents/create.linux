












/*

#include "./../../../roots/lakes/bubbles/prepare.computer"


#include "./../../../roots/lakes/create.computer"

#include "./../../../roots/lakes/resize.computer"

#include "./../../../roots/lakes/free.computer"


#include "./../../../roots/lakes/stones/measure.computer"

#include "./../../../roots/lakes/stones/copy.computer"

#include "./../../../roots/lakes/stones/find.computer"


#include "./../../../roots/trees/dirents/is.linux"

#include "./../../../roots/trees/dirents/create.linux"



#include "./../../../branches/lakes/fish.computer"

*/


void * create_fst_branches_trees_dirents

(

void * that_stones_names,

void ** that_silts_results

)

{










void * note_silts_names_dirents = that_fst_roots_lakes_bubbles_prepare;

fish_fst_branches_lakes_waves ( that_stones_names, & note_silts_names_dirents );







void * note_waters_counts = that_fst_roots_lakes_bubbles_prepare;

create_fst_roots_lakes ( & note_waters_counts );

* ( __uint64_t * ) note_waters_counts  =  1;







void * note_waters_counts_two = that_fst_roots_lakes_bubbles_prepare;

create_fst_roots_lakes ( & note_waters_counts_two );   







void * note_waters_sizes = that_fst_roots_lakes_bubbles_prepare;

create_fst_roots_lakes ( & note_waters_sizes );



measure_fst_roots_lakes_stones ( note_silts_names_dirents, & note_waters_sizes );


// char for one bytes

* ( __uint64_t * ) note_waters_sizes = 1  *  ( 1 + * ( __uint64_t * ) note_waters_sizes );



void * note_stones_names = that_fst_roots_lakes_bubbles_prepare;

create_fst_roots_lakes ( & note_stones_names );

resize_fst_roots_lakes ( & note_stones_names, note_waters_sizes );



free_fst_roots_lakes ( & note_waters_sizes );







void * note_silts_names = that_fst_roots_lakes_bubbles_prepare;







void * note_waters_results = that_fst_roots_lakes_bubbles_prepare;
   
create_fst_roots_lakes ( & note_waters_results );



















/*

that_words_name       /.../.../...

note_numbers_count     1   2  ...

note_words_name        /...  /...

*/







while  (    * ( __uint64_t * ) note_waters_counts  !=  0    )

{







copy_fst_roots_lakes_stones  ( note_stones_names,  note_silts_names_dirents );




note_silts_names = note_stones_names;












* ( __uint64_t * ) note_waters_counts_two   =   0;

while

(

* ( __uint64_t * ) note_waters_counts_two   <   * ( __uint64_t * ) note_waters_counts

)

{




  

find_fst_roots_lakes_stones
   
(

( void * ) (  ( __uint8_t * ) note_silts_names + 1 ),
   
( void * ) "/",
   
& note_silts_names

);








if  (  note_silts_names   ==   that_fst_roots_lakes_bubbles_prepare  )

{

* ( __uint64_t * ) note_waters_counts   =   0;

}







* ( __uint64_t * ) note_waters_counts_two   =   * ( __uint64_t * ) note_waters_counts_two   +   1;

}














if (  * ( __uint64_t * ) note_waters_counts   !=   0  )

{








   
* ( __uint64_t * ) note_waters_counts   =   * ( __uint64_t * ) note_waters_counts   +   1;









copy_fst_roots_lakes_stones ( note_silts_names, "\0" );








   
is_fst_roots_trees_dirents ( note_stones_names, & note_waters_results );









if  (  * ( __uint64_t * ) note_waters_results   ==   0  )

{






create_fst_roots_trees_dirents ( note_stones_names, & note_waters_results );







if  (  * ( __uint64_t * ) note_waters_results   ==   0  )

{







fish_fst_branches_lakes_waves

(

( void * ) "fst,branches,lakes,bubbles,no",

that_silts_results

);






free_fst_roots_lakes ( & note_stones_names );

free_fst_roots_lakes ( & note_waters_counts );

free_fst_roots_lakes ( & note_waters_counts_two );

free_fst_roots_lakes ( & note_waters_results );


return that_fst_roots_lakes_bubbles_prepare;

}


}



}





}





















is_fst_roots_trees_dirents ( note_silts_names_dirents, & note_waters_results );









if  (  * ( __uint64_t * ) note_waters_results   ==   0  )

{






create_fst_roots_trees_dirents ( note_silts_names_dirents, & note_waters_results );







if  (  * ( __uint64_t * ) note_waters_results   ==   1  )

{




fish_fst_branches_lakes_waves

(

( void * ) "fst,branches,lakes,bubbles,yes",

that_silts_results

);




free_fst_roots_lakes ( & note_stones_names );

free_fst_roots_lakes ( & note_waters_counts );

free_fst_roots_lakes ( & note_waters_counts_two );

free_fst_roots_lakes ( & note_waters_results );


return that_fst_roots_lakes_bubbles_prepare;

}


}



















fish_fst_branches_lakes_waves

(

( void * ) "fst,branches,lakes,bubbles,no",

that_silts_results

);




free_fst_roots_lakes ( & note_stones_names );

free_fst_roots_lakes ( & note_waters_counts );

free_fst_roots_lakes ( & note_waters_counts_two );

free_fst_roots_lakes ( & note_waters_results );


return that_fst_roots_lakes_bubbles_prepare;


}