






void  *   fish_fst_branches_lake

(

void *  that_words_names,

void ** that_places_results

)

{





void * note_numbers_counts = NULL;

create_fst_roots_lake ( & note_numbers_counts );


void * note_numbers_results;
 
create_fst_roots_lake ( & note_numbers_results );





* ( __uint64_t * ) note_numbers_counts  =  1;

while

(

* ( __uint64_t * ) note_numbers_counts  <=  * ( __uint64_t * ) that_fst_branches_lake  [ 0 ] [ 1 ]

)

{


compare_fst_roots_lake_words

(

that_words_names,

that_fst_branches_lake  [  * ( __uint64_t * ) note_numbers_counts  ] [ 0 ],

& note_numbers_results

);



if   (   * ( __uint64_t * ) note_numbers_results   ==   1   )

{


* that_places_results   =   that_fst_branches_lake  [  * ( __uint64_t * ) note_numbers_counts  ] [ 1 ];


free_fst_roots_lake  (  & note_numbers_counts  );

free_fst_roots_lake  (  & note_numbers_results  );

 
return  NULL;


}



* ( __uint64_t * ) note_numbers_counts  =  * ( __uint64_t * ) note_numbers_counts   +   1;
 
}





* that_places_results   =  NULL; 


free_fst_roots_lake ( & note_numbers_counts );

free_fst_roots_lake ( & note_numbers_results );
 
 
return  NULL;

}

