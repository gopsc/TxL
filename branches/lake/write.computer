



void *  write_fst_branches_lake

(

void *  that_words_names,

void *  that_words_contents

)

{




void  *   note_numbers_counts  =  NULL;

create_fst_roots_data  ( & note_numbers_counts );




void * note_numbers_sizes = NULL;

create_fst_roots_data ( & note_numbers_sizes );




void  *   note_numbers_results  =  NULL;

create_fst_roots_data  (  & note_numbers_results  );



void * note_numbers_lengths_names = NULL;

create_fst_roots_data ( & note_numbers_lengths_names );




void  *   note_numbers_lengths_wrote  =  NULL;

create_fst_roots_data  (  & note_numbers_lengths_wrote  );




void  *  note_numbers_lengths_targets  =  NULL;

create_fst_roots_data  (  note_numbers_lengths_targets  );






* ( __uint64_t * ) note_numbers_counts   =   1;

while

(

* ( __uint64_t * ) note_numbers_counts
<=
* ( __uint64_t * ) that_fst_branches_lake  [ 0 ] [ 1 ]

)

{





compare_fst_roots_data_words

(

that_words_names,

that_fst_branches_lake  [ * ( __uint64_t * ) note_numbers_counts ] [ 0 ],

& note_numbers_results

);




if   (   * ( __uint64_t * ) note_numbers_results   ==   0   )

{


measure_fst_roots_data_words

(

that_words_contents,

& note_numbers_lengths_wrote

);


measure_fst_roots_data_words

(

that_fst_branches_lake  [ * ( __uint64_t * ) note_numbers_counts ] [ 1 ],

& note_numbers_lengths_targets

);




if

(

* ( __uint64_t * ) note_numbers_lengths_wrote
<=
* ( __uint64_t * ) note_numbers_lengths_targets

)

{


copy_fst_roots_data_words

(

that_fst_branches_lake  [ * ( __uint64_t * ) note_numbers_counts ] [ 1 ],

that_words_contents

);



* ( __uint64_t * ) note_numbers_sizes   =   1  *  ( 1 + * ( __uint64_t * ) note_numbers_lengths_wrote );

resize_fst_roots_data

(

that_fst_branches_lake  [ * ( __uint64_t * ) note_numbers_counts ] [ 1 ],

note_numbers_sizes

);


}




else if

(

* ( __uint64_t * ) note_numbers_lengths_wrote
>
* ( __uint64_t * ) note_numbers_lengths_targets

)

{


* ( __uint64_t * ) note_numbers_sizes   =   1  *  ( 1 + * ( __uint64_t * ) note_numbers_lengths_wrote );

resize_fst_roots_data

(

that_fst_branches_lake  [ * ( __uint64_t * ) note_numbers_counts ] [ 1 ],

note_numbers_sizes

);


copy_fst_roots_data_words

(

that_fst_branches_lake  [ * ( __uint64_t * ) note_numbers_counts ] [ 1 ],

that_words_contents

);


}




free_fst_roots_data  (  & note_numbers_sizes  );

free_fst_roots_data  (  & note_numbers_lengths_names  );

free_fst_roots_data  (  & note_numbers_lengths_wrote  );

free_fst_roots_data  (  & note_numbers_lengths_targets  );

free_fst_roots_data  (  & note_numbers_counts  );

free_fst_roots_data  (  & note_numbers_results  );


return  that_fst_branches_lake;

}





* ( __uint64_t * ) note_numbers_counts   =   * ( __uint64_t * ) note_numbers_counts   +   1;

}







/*

read over, create new fish

*/


measure_fst_roots_data_words ( that_words_names, & note_numbers_lengths_names );

measure_fst_roots_data_words ( that_words_contents, & note_numbers_lengths_wrote );






* ( __uint64_t * ) note_numbers_sizes   =   8   *   (   1   +   1   +   * ( __uint64_t * ) that_fst_branches_lake [ 0 ] [ 1 ]   );


resize_fst_roots_data  (

( void * * ) & that_fst_branches_lake,

note_numbers_sizes

);





* ( __uint64_t * ) note_numbers_sizes   =   8 * 2;


create_fst_roots_data

(

( void * * ) & that_fst_branches_lake  [ * ( __uint64_t * ) note_numbers_counts ]

);


resize_fst_roots_data

(

( void * * ) & that_fst_branches_lake  [ * ( __uint64_t * ) note_numbers_counts ],

note_numbers_sizes

);





* ( __uint64_t * ) note_numbers_sizes   =   1   *   (  1  +  * ( __uint64_t * ) note_numbers_lengths_names  );


create_fst_roots_data

(

& that_fst_branches_lake  [ * ( __uint64_t * ) note_numbers_counts ] [ 0 ]

);


resize_fst_roots_data

(

& that_fst_branches_lake  [ * ( __uint64_t * ) note_numbers_counts ] [ 0 ],

note_numbers_sizes

);


copy_fst_roots_data_words

(

that_fst_branches_lake [ * ( __uint64_t * ) note_numbers_counts ] [ 0 ],

that_words_names

);





* ( __uint64_t * ) note_numbers_sizes   =   1   *   (  1  +  * ( __uint64_t * ) note_numbers_lengths_wrote  );


create_fst_roots_data

(

& that_fst_branches_lake  [ * ( __uint64_t * ) note_numbers_counts ] [ 1 ]

);



resize_fst_roots_data

(

& that_fst_branches_lake  [ * ( __uint64_t * ) note_numbers_counts ] [ 1 ],

note_numbers_sizes

);




copy_fst_roots_data_words

(

& that_fst_branches_lake [ * ( __uint64_t * ) note_numbers_counts ] [ 1 ],

that_words_contents

);




* ( __uint64_t * ) that_fst_branches_lake  [ 0 ] [ 1 ]   =   * ( __uint64_t * ) that_fst_branches_lake [ 0 ] [ 1 ]   +   1;





free_fst_roots_data  (  & note_numbers_sizes  );

free_fst_roots_data  (  & note_numbers_lengths_names  );

free_fst_roots_data  (  & note_numbers_lengths_wrote  );

free_fst_roots_data  (  & note_numbers_lengths_targets  );

free_fst_roots_data  (  & note_numbers_counts  );

free_fst_roots_data  (  & note_numbers_results  );


return  that_fst_branches_lake;



}
