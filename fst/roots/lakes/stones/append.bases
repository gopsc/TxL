

#include <stdlib.h>




#ifndef added_fst_roots_lakes_stones_append

#define added_fst_roots_lakes_stones_append




void * append_fst_roots_lakes_stones

(

void * that_stones_targets,

void * that_stones_append

)

{

























if (  ( void * ) that_stones_targets == NULL  )

{

return NULL;

}









if (  ( void * ) that_stones_append == NULL )

{

return NULL;

}

























void * note_silts_counts_targets = NULL;









while ( note_silts_counts_targets == NULL )

{

note_silts_counts_targets = malloc (  1 * sizeof ( int )  );

}









* ( int * ) note_silts_counts_targets = 0;
















void * note_silts_counts_append = NULL;









while ( note_silts_counts_append == NULL )

{

note_silts_counts_append = malloc (  1 * sizeof ( int )  );

}









* ( int * ) note_silts_counts_append = 0;

























* ( int * ) note_silts_counts_targets = 0;









while (  * (  ( char * ) that_stones_targets  +  * ( int * ) note_silts_counts_targets  )  !=  '\0'  )

{

* ( int * ) note_silts_counts_targets  =  * ( int * ) note_silts_counts_targets  +  1;

}

























* ( int * ) note_silts_counts_append = 0;









while (  * (  ( char * ) that_stones_append  +  * ( int * ) note_silts_counts_append  )  !=  '\0'  )

{

























* (  ( char * ) that_stones_targets  +  * ( int * ) note_silts_counts_targets  +  * ( int * ) note_silts_counts_append  )

=

* (  ( char * ) that_stones_append  +  * ( int * ) note_silts_counts_append  );

























* ( int * ) note_silts_counts_append  =  * ( int * ) note_silts_counts_append  +  1;









}









* (  ( char * ) that_stones_targets  +  * ( int * ) note_silts_counts_targets  +  * ( int * ) note_silts_counts_append  )  =  '\0';

























* ( int * ) note_silts_counts_targets = 0;









if ( note_silts_counts_targets != NULL )

{

free ( note_silts_counts_targets );

}









note_silts_counts_targets = NULL;
















* ( int * ) note_silts_counts_append = 0;









if ( note_silts_counts_append != NULL )

{

free ( note_silts_counts_append );

}









note_silts_counts_append = NULL;

























return  NULL;









}




#endif

