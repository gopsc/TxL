





void *  drop_fst_branches_lake

(  void *  that_words_names  )

{




void * note_numbers_counts = NULL;

create_fst_roots_lake  ( & note_numbers_counts );



void * note_numbers_results = NULL;

create_fst_roots_lake  ( & note_numbers_results );



void * note_numbers_sizes = NULL;

create_fst_roots_lake ( & note_numbers_sizes );



void * note_numbers_switches = NULL;

create_fst_roots_lake  (  & note_numbers_switches  );

* ( __uint64_t * ) note_numbers_switches   =   0;





* ( __uint64_t * ) note_numbers_counts   =   1;
  
while

(

* ( __uint64_t * ) note_numbers_counts  <=   * ( __uint64_t * ) that_fst_branches_lake [ 0 ] [ 1 ]

)

{




if  (  * ( __uint64_t * ) note_numbers_switches   ==   0  )

{



compare_fst_roots_lake_words

(

that_words_names,

that_fst_branches_lake  [ * ( __uint64_t * ) note_numbers_counts ] [ 0 ],

& note_numbers_results

);



  
if  (   * ( __uint64_t * ) note_numbers_results   ==   1   )

{


free_fst_roots_lake  (  & that_fst_branches_lake  [ * ( __uint64_t * ) note_numbers_counts ] [ 0 ]  );

free_fst_roots_lake  (  & that_fst_branches_lake  [ * ( __uint64_t * ) note_numbers_counts ] [ 1 ]  );

free_fst_roots_lake  (  ( void * * ) & that_fst_branches_lake  [ * ( __uint64_t * ) note_numbers_counts ]  );


* ( __uint64_t * ) note_numbers_switches  =  1;


}



}





else if  (  * ( __uint64_t * ) note_numbers_switches  ==  1  )

{

that_fst_branches_lake [ * ( __uint64_t * ) note_numbers_counts  -  1 ]
=
that_fst_branches_lake [ * ( __uint64_t * ) note_numbers_counts ];

}



* ( __uint64_t * ) note_numbers_counts   =   * ( __uint64_t * ) note_numbers_counts   +   1;

}


  
  
  
  
  
  

if  (  * ( __uint64_t * ) note_numbers_switches   ==   1  )

{

* ( __uint64_t * ) that_fst_branches_lake [ 0 ] [ 1 ]  =  * ( __uint64_t * ) that_fst_branches_lake [ 0 ] [ 1 ]   -   1;


* ( __uint64_t * ) note_numbers_sizes  =  8  *  ( 1  +  * ( __uint64_t * ) that_fst_branches_lake  [ 0 ] [ 1 ] );

resize_fst_roots_lake

(

( void * * ) & that_fst_branches_lake,

note_numbers_sizes

);


}







free_fst_roots_lake  ( & note_numbers_counts );

free_fst_roots_lake  ( & note_numbers_results  );

free_fst_roots_lake  ( & note_numbers_sizes );

free_fst_roots_lake  ( & note_numbers_switches );
  
  
return  NULL;

}



