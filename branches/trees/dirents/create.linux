/*

#include "./../../../roots/lakes/prepare.computer"


#include "./../../../roots/lakes/waves/create.computer"

#include "./../../../roots/lakes/waves/resize.computer"

#include "./../../../roots/lakes/waves/free.computer"


#include "./../../../roots/lakes/stones/copy.computer"

#include "./../../../roots/lakes/stones/measure.computer"

#include "./../../../roots/lakes/stones/find.computer"


#include "./../../../roots/trees/dirents/is.linux"

#include "./../../../roots/trees/dirents/create.linux"



#include "./../../../branches/lakes/waves/fish.computer"

*/


void * create_fst_branches_trees_dirents

(

void * that_stones_names,

void ** that_waters_results

)

{



void * note_waters_names_dirents = that_fst_roots_lakes_prepare;

fish_fst_branches_lakes_waves ( that_stones_names, & note_waters_names_dirents );



void * note_silts_counts = that_fst_roots_lakes_prepare;

create_fst_roots_lakes_waves ( & note_silts_counts );

* ( __uint64_t * ) note_silts_counts  =  1;



void * note_silts_counts_two = that_fst_roots_lakes_prepare;

create_fst_roots_lakes_waves ( & note_silts_counts_two );   



void * note_silts_sizes = that_fst_roots_lakes_prepare;

create_fst_roots_lakes_waves ( & note_silts_sizes );


measure_fst_roots_lakes_stones ( note_waters_names_dirents, & note_silts_sizes );


// char for one bytes

* ( __uint64_t * ) note_silts_sizes = 1  *  ( 1 + * ( __uint64_t * ) note_silts_sizes );


void * note_stones_names = that_fst_roots_lakes_prepare;

create_fst_roots_lakes_waves ( & note_stones_names );

resize_fst_roots_lakes_waves ( & note_stones_names, note_silts_sizes );


free_fst_roots_lakes_waves ( & note_silts_sizes );



void * note_waters_names = that_fst_roots_lakes_prepare;



void * note_silts_results = that_fst_roots_lakes_prepare;
   
create_fst_roots_lakes_waves ( & note_silts_results );






/*

that_words_name       /.../.../...

note_numbers_count     1   2  ...

note_words_name        /...  /...

*/


while  (    * ( __uint64_t * ) note_silts_counts  !=  0    )

{




copy_fst_roots_lakes_stones  ( note_stones_names,  note_waters_names_dirents );



note_waters_names = note_stones_names;




* ( __uint64_t * ) note_silts_counts_two   =   0;

while

(

* ( __uint64_t * ) note_silts_counts_two

<

* ( __uint64_t * ) note_silts_counts

)

{


find_fst_roots_lakes_stones
   
(

( void * ) (  ( __uint8_t * ) note_waters_names + 1 ),
   
( void * ) "/",
   
& note_waters_names

);



if  (  note_waters_names   ==   that_fst_roots_lakes_prepare  )

{

* ( __uint64_t * ) note_silts_counts   =   0;

}


* ( __uint64_t * ) note_silts_counts_two   =   * ( __uint64_t * ) note_silts_counts_two   +   1;

}




if (  * ( __uint64_t * ) note_silts_counts   !=   0  )

{

   
* ( __uint64_t * ) note_silts_counts   =   * ( __uint64_t * ) note_silts_counts   +   1;




copy_fst_roots_lakes_stones ( note_waters_names, "\0" );



   
is_fst_roots_trees_dirents ( note_stones_names, & note_silts_results );




if  (  * ( __uint64_t * ) note_silts_results   ==   0  )

{



create_fst_roots_trees_dirents ( note_stones_names, & note_silts_results );



if  (  * ( __uint64_t * ) note_silts_results   ==   0  )

{



fish_fst_branches_lakes_waves

(

( void * ) "fst,branches,lakes,bubbles,no",

that_waters_results

);



free_fst_roots_lakes_waves ( & note_stones_names );

free_fst_roots_lakes_waves ( & note_silts_counts );

free_fst_roots_lakes_waves ( & note_silts_counts_two );

free_fst_roots_lakes_waves ( & note_silts_results );


return that_fst_roots_lakes_prepare;

}

}



}


}



free_fst_roots_lakes_waves ( & note_stones_names );

free_fst_roots_lakes_waves ( & note_silts_counts );

free_fst_roots_lakes_waves ( & note_silts_counts_two );







is_fst_roots_trees_dirents ( note_waters_names_dirents, & note_silts_results );



if  (  * ( __uint64_t * ) note_silts_results   ==   0  )

{


create_fst_roots_trees_dirents ( note_waters_names_dirents, & note_silts_results );


if  (  * ( __uint64_t * ) note_silts_results   ==   1  )

{


fish_fst_branches_lakes_waves

(

( void * ) "fst,branches,lakes,bubbles,yes",

that_waters_results

);



free_fst_roots_lakes_waves ( & note_silts_results );


return that_fst_roots_lakes_prepare;

}

}






fish_fst_branches_lakes_waves

(

( void * ) "fst,branches,lakes,bubbles,no",

that_waters_results

);


free_fst_roots_lakes_waves ( & note_silts_results );

return that_fst_roots_lakes_prepare;

}