




#include <stdlib.h>


void *  fstRootsDataWordsCompare


(

void *  that_words_compared,

void *  that_words_compare,

void ** that_numbers_results

)

{



void *  note_numbers_lengths_compared;

note_numbers_lengths_compared   =   malloc  (  sizeof ( __uint64_t )  );



* ( __uint64_t * ) note_numbers_lengths_compared   =   0;

while

(

* ( char * )  (  that_words_compared  +  * ( __uint64_t * ) note_numbers_lengths_compared  )   !=   '\0'

)

{

* ( __uint64_t * ) note_numbers_lengths_compared   =   * ( __uint64_t * ) note_numbers_lengths_compared   +   1;

}





void *  note_numbers_lengths_compare;

note_numbers_lengths_compare   =   malloc  (  sizeof ( __uint64_t )  );



* ( __uint64_t * ) note_numbers_lengths_compare   =   0;

while

(

* ( char * ) (  that_words_compare  +  * ( __uint64_t * ) note_numbers_lengths_compare  )   !=   '\0'

)

{

* ( __uint64_t * ) note_numbers_lengths_compare   =   * ( __uint64_t * ) note_numbers_lengths_compare   +   1;

}









if

(

* ( __uint64_t * ) note_numbers_lengths_compared
!=
* ( __uint64_t * ) note_numbers_lengths_compare

)

{


free  (  note_numbers_lengths_compared  );

free  (  note_numbers_lengths_compare  );


* ( __uint64_t * ) * that_numbers_results   =   0;


return  NULL;

}







void *  note_numbers_counts;

note_numbers_counts   =   malloc  (  sizeof ( __uint64_t )  );



* ( __uint64_t * ) note_numbers_counts   =   0;

while

(

* ( __uint64_t * ) note_numbers_counts   <   * ( __uint64_t * ) note_numbers_lengths_compared

)

{



if

(

* ( char * ) (  that_words_compared  +  * ( __uint64_t * ) note_numbers_counts  ) 
!=
* ( char * ) (  that_words_compare  +  * ( __uint64_t * ) note_numbers_counts  )

)

{

free  (  note_numbers_lengths_compared  );

free  (  note_numbers_lengths_compare  );

free  (  note_numbers_counts  );


* ( __uint64_t * ) * that_numbers_results   =   0;


return  NULL;

}




* ( __uint64_t * ) note_numbers_counts   =   * ( __uint64_t * ) note_numbers_counts   +   1;

}









free  (  note_numbers_lengths_compared  );

free  (  note_numbers_lengths_compare  );

free  (  note_numbers_counts  );


* ( __uint64_t * ) * that_numbers_results   =   1;


return  NULL;

}








